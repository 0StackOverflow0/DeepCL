Let's call dimensions of w, wl1, wl2, wl3, wl4:
    wl3, wl4, correspond to the points in a single image plane
    w2 corresponds to multiple input planes
    w1 corresponds to multiple output planes

In the general case, the input examples, for each n, would be hypercubes:
   - cubes along the w1 dimension, one for each output plane
   - planes along the w2 dimension, one for each input plane
   - points in the w3,w4 dimensions

... but we are 'valid' convolving in the w1 and w2 dimensions, ie not zero-padding these dimensions
- in w1 dimension, input length is 1, so w1 length of output = w1 length of w
- in w2 dimension, w2 length of w, and w2 length of input are same, so w2 length of output is 1
=> so we remove one dimension from input effecdtively, and one from output
=> and then we add a dimension, for the number of examples

In fact, in the general case, output for us should be *5*-dimensions:
   n * hypercubes, each hypercube:
       w * cubes, each cube:
          p * planes, each plane
              some points, in 2d

... only we are constraining 'p' to be 1, ie no zero-padding along the 'p'-dimension, so in the p-dimension, the
w hypercube 





a w cube is applied over:
    // inputplanes
    // boardrow
    // boardcol
n is for iteration -> each sample in / out is independent

each point on output, p,x,y is formed from:
   // all input planes (in other words, planes have no spacial locality)
   // points near x,y on each plane

so w will have same depth as the input cubes

num out planes = number of w cubes

w comprises:
  // one cube for each output
  // each cube:
      // plane for each input plane
          // some points (smaller than input plane)
4 dimensions

input comprises:
   // cube of planes
       // plane
           // points
3 dimensions * N

output comprises:
   // cube of planes
       // plane
           // points
3 dimensions * N

convolution, 1 dimension: f[m] (*) g[m] = \sum_u f[u] g[m-u]
=> all are 1 dimensional
2-dimensions: f[m,n] (*) g[m,n] = \sum_u \sum_v f[u,v] g[m-u,n-v]
eg f is an image, g is a kernel to modify that image
can convolve multiple images, so f could be three dimensions, and output is 3 dimension
but g would still be 2 dimensions, one less than f...

3-dimensions: f[m,n,o] * g[m,n,o] = \sum_u \sum_v \sum_w f[m,n,o] g[m,n,o]
input cube:  planes m, points n, o
filter: filter m, filter points n, o
output cube: planes m, points n, o
but can contrain m to be 1, if a 'valid' convolution, so output is 2-dimensions...

then, we can have multiple input cubes, so input 4-dimensions
multiple filter cubes, so filters are 4 dimensions
multipl

input, general case:
   n hypercubes, each hypercube:
       w cubes, each cube:
           

