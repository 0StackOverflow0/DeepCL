/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ActivationMaker swig_types[0]
#define SWIGTYPE_p_Adagrad swig_types[1]
#define SWIGTYPE_p_Annealer swig_types[2]
#define SWIGTYPE_p_BatchResult swig_types[3]
#define SWIGTYPE_p_ConvolutionalMaker swig_types[4]
#define SWIGTYPE_p_CrossEntropyLossMaker swig_types[5]
#define SWIGTYPE_p_DropoutMaker swig_types[6]
#define SWIGTYPE_p_EasyCL swig_types[7]
#define SWIGTYPE_p_FullyConnectedMaker swig_types[8]
#define SWIGTYPE_p_GenericLoader swig_types[9]
#define SWIGTYPE_p_InputLayerMaker swig_types[10]
#define SWIGTYPE_p_LayerMaker2 swig_types[11]
#define SWIGTYPE_p_Nesterov swig_types[12]
#define SWIGTYPE_p_NetLearner swig_types[13]
#define SWIGTYPE_p_NetdefToNet swig_types[14]
#define SWIGTYPE_p_NeuralNet swig_types[15]
#define SWIGTYPE_p_NormalizationLayerMaker swig_types[16]
#define SWIGTYPE_p_PoolingMaker swig_types[17]
#define SWIGTYPE_p_QLearner2 swig_types[18]
#define SWIGTYPE_p_Rmsprop swig_types[19]
#define SWIGTYPE_p_SGD swig_types[20]
#define SWIGTYPE_p_SoftMaxMaker swig_types[21]
#define SWIGTYPE_p_SquareLossMaker swig_types[22]
#define SWIGTYPE_p_Trainer swig_types[23]
#define SWIGTYPE_p_TrainingContext swig_types[24]
#define SWIGTYPE_p_cl_device_id swig_types[25]
#define SWIGTYPE_p_cl_platform_id swig_types[26]
#define SWIGTYPE_p_float swig_types[27]
#define SWIGTYPE_p_floatArray swig_types[28]
#define SWIGTYPE_p_floatSlice swig_types[29]
#define SWIGTYPE_p_int swig_types[30]
#define SWIGTYPE_p_intArray swig_types[31]
#define SWIGTYPE_p_intSlice swig_types[32]
#define SWIGTYPE_p_std__string swig_types[33]
static swig_type_info *swig_types[35];
static swig_module_info swig_module = {swig_types, 34, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "LuaDeepCL"
#define SWIG_init      luaopen_LuaDeepCL
#define SWIG_init_user luaopen_LuaDeepCL_user

#define SWIG_LUACODE   luaopen_LuaDeepCL_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char);
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char);
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int);
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int);
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short);
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short);
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long);
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long);
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float);
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double);

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include "DeepCL.h"
#include "EasyCL.h"
#include "qlearning/QLearner2.h"


void GenericLoader_load( std::string trainFilepath, float *images, int *labels, int startN, int numExamples ) {
    //int N, planes, size;
    //GenericLoader::getDimensions( trainFilepath, &N, &planes, &size );
    //int linearSize = numExamples * planes * size * size;
    // let's just convert to floats for now... since swig apparently makes floats easy, and
    // I'd need a bit of effort to persuade it to accept unsigned char * arrays plausibly
/*    unsigned char *ucarray = new unsigned char[linearSize];*/
    GenericLoader::load( trainFilepath, images, labels, startN, numExamples );
//    for( int i = 0; i < linearSize; i++ ) {
//        images[i] = ucarray[i];
 //   }
  //  delete[] ucarray;
}

SWIGINTERN void NeuralNet_getOutput__SWIG_1(NeuralNet *self,float *outputParam){
            int outputSize = self->getOutputSize();
            float const*output = self->getOutput();
            for( int i = 0; i < outputSize; i++ ) {
                outputParam[i] = output[i];
            }
        }

typedef float floatArray;

SWIGINTERN floatArray *new_floatArray(int nelements){
  return new float[nelements];
}
SWIGINTERN void delete_floatArray(floatArray *self){
  delete [] self;
}
SWIGINTERN float floatArray_getitem(floatArray *self,int index){
  return self[index];
}
SWIGINTERN void floatArray_setitem(floatArray *self,int index,float value){
  self[index] = value;
}
SWIGINTERN float *floatArray_cast(floatArray *self){
  return self;
}
SWIGINTERN floatArray *floatArray_frompointer(float *t){
  return (floatArray *) t;
}

typedef int intArray;

SWIGINTERN intArray *new_intArray(int nelements){
  return new int[nelements];
}
SWIGINTERN void delete_intArray(intArray *self){
  delete [] self;
}
SWIGINTERN int intArray_getitem(intArray *self,int index){
  return self[index];
}
SWIGINTERN void intArray_setitem(intArray *self,int index,int value){
  self[index] = value;
}
SWIGINTERN int *intArray_cast(intArray *self){
  return self;
}
SWIGINTERN intArray *intArray_frompointer(int *t){
  return (intArray *) t;
}

typedef float floatSlice;

SWIGINTERN floatSlice *new_floatSlice__SWIG_0(float *base,int offset){
  return base + offset;
}
SWIGINTERN floatSlice *new_floatSlice__SWIG_1(float *base){ // will try using this for `float *getOutput()`
  return base;
}
SWIGINTERN void delete_floatSlice(floatSlice *self){
}
SWIGINTERN float *floatSlice_cast(floatSlice *self){
  return self;
}

typedef int intSlice;

SWIGINTERN intSlice *new_intSlice__SWIG_0(int *base,int offset){
  return base + offset;
}
SWIGINTERN intSlice *new_intSlice__SWIG_1(int *base){ // will try using this for `float *getOutput()`
  return base;
}
SWIGINTERN void delete_intSlice(intSlice *self){
}
SWIGINTERN int *intSlice_cast(intSlice *self){
  return self;
}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_string_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_string_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_string_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, { "string", swig_std_string_cls_methods, swig_std_string_cls_attributes, swig_std_string_cls_constants }, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_GenericLoader_getDimensions(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  arg2 = &temp2; 
  arg3 = &temp3; 
  arg4 = &temp4; 
  SWIG_check_num_args("GenericLoader::getDimensions",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("GenericLoader::getDimensions",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  GenericLoader::getDimensions(arg1,arg2,arg3,arg4);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg4); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GenericLoader(lua_State* L) {
  int SWIG_arg = 0;
  GenericLoader *result = 0 ;
  
  SWIG_check_num_args("GenericLoader::GenericLoader",0,0)
  result = (GenericLoader *)new GenericLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GenericLoader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GenericLoader(void *obj) {
GenericLoader *arg1 = (GenericLoader *) obj;
delete arg1;
}
static swig_lua_method swig_GenericLoader_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_GenericLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_GenericLoader_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GenericLoader_cls_methods[] = {
    {"getDimensions", _wrap_GenericLoader_getDimensions}, 
    {0,0}
};
static swig_lua_const_info swig_GenericLoader_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_GenericLoader_bases[] = {0};
static const char *swig_GenericLoader_base_names[] = {0};
static swig_lua_class _wrap_class_GenericLoader = { "GenericLoader", &SWIGTYPE_p_GenericLoader,_wrap_new_GenericLoader, swig_delete_GenericLoader, swig_GenericLoader_methods, swig_GenericLoader_attributes, { "GenericLoader", swig_GenericLoader_cls_methods, swig_GenericLoader_cls_attributes, swig_GenericLoader_cls_constants }, swig_GenericLoader_bases, swig_GenericLoader_base_names };

static int _wrap_GenericLoader_load(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("GenericLoader_load",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("GenericLoader_load",1,"std::string");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GenericLoader_load",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("GenericLoader_load",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GenericLoader_load",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GenericLoader_load",5,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("GenericLoader_load",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("GenericLoader_load",3,SWIGTYPE_p_int);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  GenericLoader_load(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EasyCL_createForFirstGpu(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *result = 0 ;
  
  SWIG_check_num_args("EasyCL::createForFirstGpu",0,0)
  result = (EasyCL *)EasyCL::createForFirstGpu();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EasyCL,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EasyCL_createForFirstGpuOtherwiseCpu(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *result = 0 ;
  
  SWIG_check_num_args("EasyCL::createForFirstGpuOtherwiseCpu",0,0)
  result = (EasyCL *)EasyCL::createForFirstGpuOtherwiseCpu();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EasyCL,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EasyCL_createForIndexedGpu(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  EasyCL *result = 0 ;
  
  SWIG_check_num_args("EasyCL::createForIndexedGpu",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("EasyCL::createForIndexedGpu",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (EasyCL *)EasyCL::createForIndexedGpu(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EasyCL,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EasyCL_createForPlatformDeviceIndexes(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  EasyCL *result = 0 ;
  
  SWIG_check_num_args("EasyCL::createForPlatformDeviceIndexes",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("EasyCL::createForPlatformDeviceIndexes",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EasyCL::createForPlatformDeviceIndexes",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (EasyCL *)EasyCL::createForPlatformDeviceIndexes(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EasyCL,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EasyCL_createForPlatformDeviceIds(lua_State* L) {
  int SWIG_arg = 0;
  cl_platform_id arg1 ;
  cl_device_id arg2 ;
  cl_platform_id *argp1 ;
  cl_device_id *argp2 ;
  EasyCL *result = 0 ;
  
  SWIG_check_num_args("EasyCL::createForPlatformDeviceIds",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("EasyCL::createForPlatformDeviceIds",1,"cl_platform_id");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("EasyCL::createForPlatformDeviceIds",2,"cl_device_id");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_cl_platform_id,0))){
    SWIG_fail_ptr("EasyCL_createForPlatformDeviceIds",1,SWIGTYPE_p_cl_platform_id);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_cl_device_id,0))){
    SWIG_fail_ptr("EasyCL_createForPlatformDeviceIds",2,SWIGTYPE_p_cl_device_id);
  }
  arg2 = *argp2;
  
  result = (EasyCL *)EasyCL::createForPlatformDeviceIds(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EasyCL,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EasyCL(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *result = 0 ;
  
  SWIG_check_num_args("EasyCL::EasyCL",0,0)
  result = (EasyCL *)new EasyCL();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EasyCL,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EasyCL(void *obj) {
EasyCL *arg1 = (EasyCL *) obj;
delete arg1;
}
static swig_lua_method swig_EasyCL_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_EasyCL_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_EasyCL_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EasyCL_cls_methods[] = {
    {"createForFirstGpu", _wrap_EasyCL_createForFirstGpu}, 
    {"createForFirstGpuOtherwiseCpu", _wrap_EasyCL_createForFirstGpuOtherwiseCpu}, 
    {"createForIndexedGpu", _wrap_EasyCL_createForIndexedGpu}, 
    {"createForPlatformDeviceIndexes", _wrap_EasyCL_createForPlatformDeviceIndexes}, 
    {"createForPlatformDeviceIds", _wrap_EasyCL_createForPlatformDeviceIds}, 
    {0,0}
};
static swig_lua_const_info swig_EasyCL_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_EasyCL_bases[] = {0};
static const char *swig_EasyCL_base_names[] = {0};
static swig_lua_class _wrap_class_EasyCL = { "EasyCL", &SWIGTYPE_p_EasyCL,_wrap_new_EasyCL, swig_delete_EasyCL, swig_EasyCL_methods, swig_EasyCL_attributes, { "EasyCL", swig_EasyCL_cls_methods, swig_EasyCL_cls_attributes, swig_EasyCL_cls_constants }, swig_EasyCL_bases, swig_EasyCL_base_names };

static int _wrap_new_TrainingContext(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TrainingContext *result = 0 ;
  
  SWIG_check_num_args("TrainingContext::TrainingContext",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TrainingContext::TrainingContext",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TrainingContext::TrainingContext",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TrainingContext *)new TrainingContext(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TrainingContext,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TrainingContext(void *obj) {
TrainingContext *arg1 = (TrainingContext *) obj;
delete arg1;
}
static swig_lua_method swig_TrainingContext_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TrainingContext_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TrainingContext_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TrainingContext_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TrainingContext_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TrainingContext_bases[] = {0};
static const char *swig_TrainingContext_base_names[] = {0};
static swig_lua_class _wrap_class_TrainingContext = { "TrainingContext", &SWIGTYPE_p_TrainingContext,_wrap_new_TrainingContext, swig_delete_TrainingContext, swig_TrainingContext_methods, swig_TrainingContext_attributes, { "TrainingContext", swig_TrainingContext_cls_methods, swig_TrainingContext_cls_attributes, swig_TrainingContext_cls_constants }, swig_TrainingContext_bases, swig_TrainingContext_base_names };

static int _wrap_Trainer_train(lua_State* L) {
  int SWIG_arg = 0;
  Trainer *arg1 = (Trainer *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  SWIG_check_num_args("Trainer::train",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trainer::train",1,"Trainer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trainer::train",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Trainer::train",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Trainer::train",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Trainer::train",5,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trainer,0))){
    SWIG_fail_ptr("Trainer_train",1,SWIGTYPE_p_Trainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Trainer_train",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Trainer_train",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Trainer_train",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Trainer_train",5,SWIGTYPE_p_float);
  }
  
  (arg1)->train(arg2,arg3,(float const *)arg4,(float const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trainer_trainFromLabels(lua_State* L) {
  int SWIG_arg = 0;
  Trainer *arg1 = (Trainer *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_num_args("Trainer::trainFromLabels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trainer::trainFromLabels",1,"Trainer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trainer::trainFromLabels",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Trainer::trainFromLabels",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Trainer::trainFromLabels",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Trainer::trainFromLabels",5,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trainer,0))){
    SWIG_fail_ptr("Trainer_trainFromLabels",1,SWIGTYPE_p_Trainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Trainer_trainFromLabels",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Trainer_trainFromLabels",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Trainer_trainFromLabels",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Trainer_trainFromLabels",5,SWIGTYPE_p_int);
  }
  
  (arg1)->trainFromLabels(arg2,arg3,(float const *)arg4,(int const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Trainer(void *obj) {
Trainer *arg1 = (Trainer *) obj;
delete arg1;
}
static swig_lua_method swig_Trainer_methods[] = {
    {"train", _wrap_Trainer_train}, 
    {"trainFromLabels", _wrap_Trainer_trainFromLabels}, 
    {0,0}
};
static swig_lua_attribute swig_Trainer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Trainer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Trainer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Trainer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Trainer_bases[] = {0};
static const char *swig_Trainer_base_names[] = {0};
static swig_lua_class _wrap_class_Trainer = { "Trainer", &SWIGTYPE_p_Trainer,0, swig_delete_Trainer, swig_Trainer_methods, swig_Trainer_attributes, { "Trainer", swig_Trainer_cls_methods, swig_Trainer_cls_attributes, swig_Trainer_cls_constants }, swig_Trainer_bases, swig_Trainer_base_names };

static int _wrap_new_BatchResult(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int arg2 ;
  BatchResult *result = 0 ;
  
  SWIG_check_num_args("BatchResult::BatchResult",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BatchResult::BatchResult",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BatchResult::BatchResult",2,"int");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (BatchResult *)new BatchResult(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BatchResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BatchResult_getLoss(lua_State* L) {
  int SWIG_arg = 0;
  BatchResult *arg1 = (BatchResult *) 0 ;
  float result;
  
  SWIG_check_num_args("BatchResult::getLoss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BatchResult::getLoss",1,"BatchResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BatchResult,0))){
    SWIG_fail_ptr("BatchResult_getLoss",1,SWIGTYPE_p_BatchResult);
  }
  
  result = (float)(arg1)->getLoss();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BatchResult_getNumRight(lua_State* L) {
  int SWIG_arg = 0;
  BatchResult *arg1 = (BatchResult *) 0 ;
  float result;
  
  SWIG_check_num_args("BatchResult::getNumRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BatchResult::getNumRight",1,"BatchResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BatchResult,0))){
    SWIG_fail_ptr("BatchResult_getNumRight",1,SWIGTYPE_p_BatchResult);
  }
  
  result = (float)(arg1)->getNumRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BatchResult(void *obj) {
BatchResult *arg1 = (BatchResult *) obj;
delete arg1;
}
static swig_lua_method swig_BatchResult_methods[] = {
    {"getLoss", _wrap_BatchResult_getLoss}, 
    {"getNumRight", _wrap_BatchResult_getNumRight}, 
    {0,0}
};
static swig_lua_attribute swig_BatchResult_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BatchResult_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BatchResult_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BatchResult_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BatchResult_bases[] = {0};
static const char *swig_BatchResult_base_names[] = {0};
static swig_lua_class _wrap_class_BatchResult = { "BatchResult", &SWIGTYPE_p_BatchResult,_wrap_new_BatchResult, swig_delete_BatchResult, swig_BatchResult_methods, swig_BatchResult_attributes, { "BatchResult", swig_BatchResult_cls_methods, swig_BatchResult_cls_attributes, swig_BatchResult_cls_constants }, swig_BatchResult_bases, swig_BatchResult_base_names };

static int _wrap_SGD_instance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  float arg2 ;
  SGD *result = 0 ;
  
  SWIG_check_num_args("SGD::instance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::instance",1,"EasyCL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SGD::instance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("SGD_instance",1,SWIGTYPE_p_EasyCL);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (SGD *)SGD::instance(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SGD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SGD_instance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  float arg2 ;
  float arg3 ;
  SGD *result = 0 ;
  
  SWIG_check_num_args("SGD::instance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::instance",1,"EasyCL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SGD::instance",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SGD::instance",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("SGD_instance",1,SWIGTYPE_p_EasyCL);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (SGD *)SGD::instance(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SGD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SGD_instance(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_EasyCL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SGD_instance__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_EasyCL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SGD_instance__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SGD_instance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SGD::instance(EasyCL *,float)\n"
    "    SGD::instance(EasyCL *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SGD_setMomentum(lua_State* L) {
  int SWIG_arg = 0;
  SGD *arg1 = (SGD *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SGD::setMomentum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::setMomentum",1,"SGD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SGD::setMomentum",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SGD,0))){
    SWIG_fail_ptr("SGD_setMomentum",1,SWIGTYPE_p_SGD);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMomentum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SGD_setWeightDecay(lua_State* L) {
  int SWIG_arg = 0;
  SGD *arg1 = (SGD *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SGD::setWeightDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::setWeightDecay",1,"SGD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SGD::setWeightDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SGD,0))){
    SWIG_fail_ptr("SGD_setWeightDecay",1,SWIGTYPE_p_SGD);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setWeightDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SGD_asString(lua_State* L) {
  int SWIG_arg = 0;
  SGD *arg1 = (SGD *) 0 ;
  std::string result;
  
  SWIG_check_num_args("SGD::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::asString",1,"SGD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SGD,0))){
    SWIG_fail_ptr("SGD_asString",1,SWIGTYPE_p_SGD);
  }
  
  result = (arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SGD_train(lua_State* L) {
  int SWIG_arg = 0;
  SGD *arg1 = (SGD *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("SGD::train",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::train",1,"SGD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SGD::train",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SGD::train",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SGD::train",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SGD::train",5,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SGD,0))){
    SWIG_fail_ptr("SGD_train",1,SWIGTYPE_p_SGD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("SGD_train",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("SGD_train",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SGD_train",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SGD_train",5,SWIGTYPE_p_float);
  }
  
  result = (arg1)->train(arg2,arg3,(float const *)arg4,(float const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SGD_trainFromLabels(lua_State* L) {
  int SWIG_arg = 0;
  SGD *arg1 = (SGD *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("SGD::trainFromLabels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::trainFromLabels",1,"SGD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SGD::trainFromLabels",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SGD::trainFromLabels",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SGD::trainFromLabels",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SGD::trainFromLabels",5,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SGD,0))){
    SWIG_fail_ptr("SGD_trainFromLabels",1,SWIGTYPE_p_SGD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("SGD_trainFromLabels",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("SGD_trainFromLabels",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SGD_trainFromLabels",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("SGD_trainFromLabels",5,SWIGTYPE_p_int);
  }
  
  result = (arg1)->trainFromLabels(arg2,arg3,(float const *)arg4,(int const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SGD(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  SGD *result = 0 ;
  
  SWIG_check_num_args("SGD::SGD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SGD::SGD",1,"EasyCL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("new_SGD",1,SWIGTYPE_p_EasyCL);
  }
  
  result = (SGD *)new SGD(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SGD,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SGD(void *obj) {
SGD *arg1 = (SGD *) obj;
delete arg1;
}
static swig_lua_method swig_SGD_methods[] = {
    {"setMomentum", _wrap_SGD_setMomentum}, 
    {"setWeightDecay", _wrap_SGD_setWeightDecay}, 
    {"asString", _wrap_SGD_asString}, 
    {"train", _wrap_SGD_train}, 
    {"trainFromLabels", _wrap_SGD_trainFromLabels}, 
    {0,0}
};
static swig_lua_attribute swig_SGD_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SGD_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SGD_cls_methods[] = {
    {"instance", _wrap_SGD_instance}, 
    {0,0}
};
static swig_lua_const_info swig_SGD_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SGD_bases[] = {0,0};
static const char *swig_SGD_base_names[] = {"Trainer *",0};
static swig_lua_class _wrap_class_SGD = { "SGD", &SWIGTYPE_p_SGD,_wrap_new_SGD, swig_delete_SGD, swig_SGD_methods, swig_SGD_attributes, { "SGD", swig_SGD_cls_methods, swig_SGD_cls_attributes, swig_SGD_cls_constants }, swig_SGD_bases, swig_SGD_base_names };

static int _wrap_Annealer_instance(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  float arg2 ;
  float arg3 ;
  Annealer *result = 0 ;
  
  SWIG_check_num_args("Annealer::instance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Annealer::instance",1,"EasyCL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Annealer::instance",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Annealer::instance",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("Annealer_instance",1,SWIGTYPE_p_EasyCL);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Annealer *)Annealer::instance(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Annealer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Annealer(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  Annealer *result = 0 ;
  
  SWIG_check_num_args("Annealer::Annealer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Annealer::Annealer",1,"EasyCL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("new_Annealer",1,SWIGTYPE_p_EasyCL);
  }
  
  result = (Annealer *)new Annealer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Annealer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Annealer_asString(lua_State* L) {
  int SWIG_arg = 0;
  Annealer *arg1 = (Annealer *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Annealer::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Annealer::asString",1,"Annealer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Annealer,0))){
    SWIG_fail_ptr("Annealer_asString",1,SWIGTYPE_p_Annealer);
  }
  
  result = (arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Annealer_setAnneal(lua_State* L) {
  int SWIG_arg = 0;
  Annealer *arg1 = (Annealer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Annealer::setAnneal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Annealer::setAnneal",1,"Annealer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Annealer::setAnneal",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Annealer,0))){
    SWIG_fail_ptr("Annealer_setAnneal",1,SWIGTYPE_p_Annealer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAnneal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Annealer_train(lua_State* L) {
  int SWIG_arg = 0;
  Annealer *arg1 = (Annealer *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Annealer::train",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Annealer::train",1,"Annealer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Annealer::train",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Annealer::train",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Annealer::train",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Annealer::train",5,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Annealer,0))){
    SWIG_fail_ptr("Annealer_train",1,SWIGTYPE_p_Annealer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Annealer_train",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Annealer_train",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Annealer_train",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Annealer_train",5,SWIGTYPE_p_float);
  }
  
  result = (arg1)->train(arg2,arg3,(float const *)arg4,(float const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Annealer_trainFromLabels(lua_State* L) {
  int SWIG_arg = 0;
  Annealer *arg1 = (Annealer *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Annealer::trainFromLabels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Annealer::trainFromLabels",1,"Annealer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Annealer::trainFromLabels",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Annealer::trainFromLabels",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Annealer::trainFromLabels",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Annealer::trainFromLabels",5,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Annealer,0))){
    SWIG_fail_ptr("Annealer_trainFromLabels",1,SWIGTYPE_p_Annealer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Annealer_trainFromLabels",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Annealer_trainFromLabels",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Annealer_trainFromLabels",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Annealer_trainFromLabels",5,SWIGTYPE_p_int);
  }
  
  result = (arg1)->trainFromLabels(arg2,arg3,(float const *)arg4,(int const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Annealer(void *obj) {
Annealer *arg1 = (Annealer *) obj;
delete arg1;
}
static swig_lua_method swig_Annealer_methods[] = {
    {"asString", _wrap_Annealer_asString}, 
    {"setAnneal", _wrap_Annealer_setAnneal}, 
    {"train", _wrap_Annealer_train}, 
    {"trainFromLabels", _wrap_Annealer_trainFromLabels}, 
    {0,0}
};
static swig_lua_attribute swig_Annealer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Annealer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Annealer_cls_methods[] = {
    {"instance", _wrap_Annealer_instance}, 
    {0,0}
};
static swig_lua_const_info swig_Annealer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Annealer_bases[] = {0,0};
static const char *swig_Annealer_base_names[] = {"Trainer *",0};
static swig_lua_class _wrap_class_Annealer = { "Annealer", &SWIGTYPE_p_Annealer,_wrap_new_Annealer, swig_delete_Annealer, swig_Annealer_methods, swig_Annealer_attributes, { "Annealer", swig_Annealer_cls_methods, swig_Annealer_cls_attributes, swig_Annealer_cls_constants }, swig_Annealer_bases, swig_Annealer_base_names };

static int _wrap_Adagrad_instance(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  float arg2 ;
  Adagrad *result = 0 ;
  
  SWIG_check_num_args("Adagrad::instance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Adagrad::instance",1,"EasyCL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Adagrad::instance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("Adagrad_instance",1,SWIGTYPE_p_EasyCL);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Adagrad *)Adagrad::instance(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Adagrad,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Adagrad(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  Adagrad *result = 0 ;
  
  SWIG_check_num_args("Adagrad::Adagrad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Adagrad::Adagrad",1,"EasyCL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("new_Adagrad",1,SWIGTYPE_p_EasyCL);
  }
  
  result = (Adagrad *)new Adagrad(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Adagrad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adagrad_asString(lua_State* L) {
  int SWIG_arg = 0;
  Adagrad *arg1 = (Adagrad *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Adagrad::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Adagrad::asString",1,"Adagrad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Adagrad,0))){
    SWIG_fail_ptr("Adagrad_asString",1,SWIGTYPE_p_Adagrad);
  }
  
  result = (arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adagrad_train(lua_State* L) {
  int SWIG_arg = 0;
  Adagrad *arg1 = (Adagrad *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Adagrad::train",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Adagrad::train",1,"Adagrad *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Adagrad::train",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Adagrad::train",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Adagrad::train",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Adagrad::train",5,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Adagrad,0))){
    SWIG_fail_ptr("Adagrad_train",1,SWIGTYPE_p_Adagrad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Adagrad_train",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Adagrad_train",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Adagrad_train",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Adagrad_train",5,SWIGTYPE_p_float);
  }
  
  result = (arg1)->train(arg2,arg3,(float const *)arg4,(float const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adagrad_trainFromLabels(lua_State* L) {
  int SWIG_arg = 0;
  Adagrad *arg1 = (Adagrad *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Adagrad::trainFromLabels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Adagrad::trainFromLabels",1,"Adagrad *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Adagrad::trainFromLabels",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Adagrad::trainFromLabels",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Adagrad::trainFromLabels",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Adagrad::trainFromLabels",5,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Adagrad,0))){
    SWIG_fail_ptr("Adagrad_trainFromLabels",1,SWIGTYPE_p_Adagrad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Adagrad_trainFromLabels",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Adagrad_trainFromLabels",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Adagrad_trainFromLabels",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Adagrad_trainFromLabels",5,SWIGTYPE_p_int);
  }
  
  result = (arg1)->trainFromLabels(arg2,arg3,(float const *)arg4,(int const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Adagrad(void *obj) {
Adagrad *arg1 = (Adagrad *) obj;
delete arg1;
}
static swig_lua_method swig_Adagrad_methods[] = {
    {"asString", _wrap_Adagrad_asString}, 
    {"train", _wrap_Adagrad_train}, 
    {"trainFromLabels", _wrap_Adagrad_trainFromLabels}, 
    {0,0}
};
static swig_lua_attribute swig_Adagrad_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Adagrad_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Adagrad_cls_methods[] = {
    {"instance", _wrap_Adagrad_instance}, 
    {0,0}
};
static swig_lua_const_info swig_Adagrad_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Adagrad_bases[] = {0,0};
static const char *swig_Adagrad_base_names[] = {"Trainer *",0};
static swig_lua_class _wrap_class_Adagrad = { "Adagrad", &SWIGTYPE_p_Adagrad,_wrap_new_Adagrad, swig_delete_Adagrad, swig_Adagrad_methods, swig_Adagrad_attributes, { "Adagrad", swig_Adagrad_cls_methods, swig_Adagrad_cls_attributes, swig_Adagrad_cls_constants }, swig_Adagrad_bases, swig_Adagrad_base_names };

static int _wrap_Rmsprop_instance(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  float arg2 ;
  Rmsprop *result = 0 ;
  
  SWIG_check_num_args("Rmsprop::instance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Rmsprop::instance",1,"EasyCL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Rmsprop::instance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("Rmsprop_instance",1,SWIGTYPE_p_EasyCL);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Rmsprop *)Rmsprop::instance(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Rmsprop,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Rmsprop(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  Rmsprop *result = 0 ;
  
  SWIG_check_num_args("Rmsprop::Rmsprop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Rmsprop::Rmsprop",1,"EasyCL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("new_Rmsprop",1,SWIGTYPE_p_EasyCL);
  }
  
  result = (Rmsprop *)new Rmsprop(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Rmsprop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rmsprop_asString(lua_State* L) {
  int SWIG_arg = 0;
  Rmsprop *arg1 = (Rmsprop *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Rmsprop::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Rmsprop::asString",1,"Rmsprop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Rmsprop,0))){
    SWIG_fail_ptr("Rmsprop_asString",1,SWIGTYPE_p_Rmsprop);
  }
  
  result = (arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rmsprop_train(lua_State* L) {
  int SWIG_arg = 0;
  Rmsprop *arg1 = (Rmsprop *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Rmsprop::train",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Rmsprop::train",1,"Rmsprop *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Rmsprop::train",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Rmsprop::train",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Rmsprop::train",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Rmsprop::train",5,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Rmsprop,0))){
    SWIG_fail_ptr("Rmsprop_train",1,SWIGTYPE_p_Rmsprop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Rmsprop_train",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Rmsprop_train",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Rmsprop_train",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Rmsprop_train",5,SWIGTYPE_p_float);
  }
  
  result = (arg1)->train(arg2,arg3,(float const *)arg4,(float const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rmsprop_trainFromLabels(lua_State* L) {
  int SWIG_arg = 0;
  Rmsprop *arg1 = (Rmsprop *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Rmsprop::trainFromLabels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Rmsprop::trainFromLabels",1,"Rmsprop *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Rmsprop::trainFromLabels",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Rmsprop::trainFromLabels",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Rmsprop::trainFromLabels",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Rmsprop::trainFromLabels",5,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Rmsprop,0))){
    SWIG_fail_ptr("Rmsprop_trainFromLabels",1,SWIGTYPE_p_Rmsprop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Rmsprop_trainFromLabels",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Rmsprop_trainFromLabels",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Rmsprop_trainFromLabels",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Rmsprop_trainFromLabels",5,SWIGTYPE_p_int);
  }
  
  result = (arg1)->trainFromLabels(arg2,arg3,(float const *)arg4,(int const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Rmsprop(void *obj) {
Rmsprop *arg1 = (Rmsprop *) obj;
delete arg1;
}
static swig_lua_method swig_Rmsprop_methods[] = {
    {"asString", _wrap_Rmsprop_asString}, 
    {"train", _wrap_Rmsprop_train}, 
    {"trainFromLabels", _wrap_Rmsprop_trainFromLabels}, 
    {0,0}
};
static swig_lua_attribute swig_Rmsprop_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Rmsprop_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Rmsprop_cls_methods[] = {
    {"instance", _wrap_Rmsprop_instance}, 
    {0,0}
};
static swig_lua_const_info swig_Rmsprop_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Rmsprop_bases[] = {0,0};
static const char *swig_Rmsprop_base_names[] = {"Trainer *",0};
static swig_lua_class _wrap_class_Rmsprop = { "Rmsprop", &SWIGTYPE_p_Rmsprop,_wrap_new_Rmsprop, swig_delete_Rmsprop, swig_Rmsprop_methods, swig_Rmsprop_attributes, { "Rmsprop", swig_Rmsprop_cls_methods, swig_Rmsprop_cls_attributes, swig_Rmsprop_cls_constants }, swig_Rmsprop_bases, swig_Rmsprop_base_names };

static int _wrap_Nesterov_instance(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  float arg2 ;
  float arg3 ;
  Nesterov *result = 0 ;
  
  SWIG_check_num_args("Nesterov::instance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Nesterov::instance",1,"EasyCL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Nesterov::instance",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Nesterov::instance",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("Nesterov_instance",1,SWIGTYPE_p_EasyCL);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Nesterov *)Nesterov::instance(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Nesterov,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Nesterov(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  Nesterov *result = 0 ;
  
  SWIG_check_num_args("Nesterov::Nesterov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Nesterov::Nesterov",1,"EasyCL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("new_Nesterov",1,SWIGTYPE_p_EasyCL);
  }
  
  result = (Nesterov *)new Nesterov(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Nesterov,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Nesterov_asString(lua_State* L) {
  int SWIG_arg = 0;
  Nesterov *arg1 = (Nesterov *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Nesterov::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Nesterov::asString",1,"Nesterov *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Nesterov,0))){
    SWIG_fail_ptr("Nesterov_asString",1,SWIGTYPE_p_Nesterov);
  }
  
  result = (arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Nesterov_setMomentum(lua_State* L) {
  int SWIG_arg = 0;
  Nesterov *arg1 = (Nesterov *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Nesterov::setMomentum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Nesterov::setMomentum",1,"Nesterov *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Nesterov::setMomentum",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Nesterov,0))){
    SWIG_fail_ptr("Nesterov_setMomentum",1,SWIGTYPE_p_Nesterov);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMomentum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Nesterov_train(lua_State* L) {
  int SWIG_arg = 0;
  Nesterov *arg1 = (Nesterov *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Nesterov::train",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Nesterov::train",1,"Nesterov *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Nesterov::train",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Nesterov::train",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Nesterov::train",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Nesterov::train",5,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Nesterov,0))){
    SWIG_fail_ptr("Nesterov_train",1,SWIGTYPE_p_Nesterov);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Nesterov_train",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Nesterov_train",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Nesterov_train",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Nesterov_train",5,SWIGTYPE_p_float);
  }
  
  result = (arg1)->train(arg2,arg3,(float const *)arg4,(float const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Nesterov_trainFromLabels(lua_State* L) {
  int SWIG_arg = 0;
  Nesterov *arg1 = (Nesterov *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  TrainingContext *arg3 = (TrainingContext *) 0 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  SwigValueWrapper< BatchResult > result;
  
  SWIG_check_num_args("Nesterov::trainFromLabels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Nesterov::trainFromLabels",1,"Nesterov *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Nesterov::trainFromLabels",2,"NeuralNet *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Nesterov::trainFromLabels",3,"TrainingContext *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Nesterov::trainFromLabels",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Nesterov::trainFromLabels",5,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Nesterov,0))){
    SWIG_fail_ptr("Nesterov_trainFromLabels",1,SWIGTYPE_p_Nesterov);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("Nesterov_trainFromLabels",2,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TrainingContext,0))){
    SWIG_fail_ptr("Nesterov_trainFromLabels",3,SWIGTYPE_p_TrainingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Nesterov_trainFromLabels",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Nesterov_trainFromLabels",5,SWIGTYPE_p_int);
  }
  
  result = (arg1)->trainFromLabels(arg2,arg3,(float const *)arg4,(int const *)arg5);
  {
    BatchResult * resultptr = new BatchResult((const BatchResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BatchResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Nesterov(void *obj) {
Nesterov *arg1 = (Nesterov *) obj;
delete arg1;
}
static swig_lua_method swig_Nesterov_methods[] = {
    {"asString", _wrap_Nesterov_asString}, 
    {"setMomentum", _wrap_Nesterov_setMomentum}, 
    {"train", _wrap_Nesterov_train}, 
    {"trainFromLabels", _wrap_Nesterov_trainFromLabels}, 
    {0,0}
};
static swig_lua_attribute swig_Nesterov_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Nesterov_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Nesterov_cls_methods[] = {
    {"instance", _wrap_Nesterov_instance}, 
    {0,0}
};
static swig_lua_const_info swig_Nesterov_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Nesterov_bases[] = {0,0};
static const char *swig_Nesterov_base_names[] = {"Trainer *",0};
static swig_lua_class _wrap_class_Nesterov = { "Nesterov", &SWIGTYPE_p_Nesterov,_wrap_new_Nesterov, swig_delete_Nesterov, swig_Nesterov_methods, swig_Nesterov_attributes, { "Nesterov", swig_Nesterov_cls_methods, swig_Nesterov_cls_attributes, swig_Nesterov_cls_constants }, swig_Nesterov_bases, swig_Nesterov_base_names };

static int _wrap_new_NeuralNet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  NeuralNet *result = 0 ;
  
  SWIG_check_num_args("NeuralNet::NeuralNet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::NeuralNet",1,"EasyCL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("new_NeuralNet",1,SWIGTYPE_p_EasyCL);
  }
  
  result = (NeuralNet *)new NeuralNet(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NeuralNet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NeuralNet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  EasyCL *arg1 = (EasyCL *) 0 ;
  int arg2 ;
  int arg3 ;
  NeuralNet *result = 0 ;
  
  SWIG_check_num_args("NeuralNet::NeuralNet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::NeuralNet",1,"EasyCL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NeuralNet::NeuralNet",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NeuralNet::NeuralNet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EasyCL,0))){
    SWIG_fail_ptr("new_NeuralNet",1,SWIGTYPE_p_EasyCL);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (NeuralNet *)new NeuralNet(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NeuralNet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NeuralNet(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_EasyCL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NeuralNet__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_EasyCL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_NeuralNet__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NeuralNet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NeuralNet::NeuralNet(EasyCL *)\n"
    "    NeuralNet::NeuralNet(EasyCL *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_NeuralNet_addLayer(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  LayerMaker2 *arg2 = (LayerMaker2 *) 0 ;
  
  SWIG_check_num_args("NeuralNet::addLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::addLayer",1,"NeuralNet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NeuralNet::addLayer",2,"LayerMaker2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_addLayer",1,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_LayerMaker2,0))){
    SWIG_fail_ptr("NeuralNet_addLayer",2,SWIGTYPE_p_LayerMaker2);
  }
  
  (arg1)->addLayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_setBatchSize(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("NeuralNet::setBatchSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::setBatchSize",1,"NeuralNet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NeuralNet::setBatchSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_setBatchSize",1,SWIGTYPE_p_NeuralNet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBatchSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_forward(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("NeuralNet::forward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::forward",1,"NeuralNet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NeuralNet::forward",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_forward",1,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NeuralNet_forward",2,SWIGTYPE_p_float);
  }
  
  (arg1)->forward((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_backwardFromLabels(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("NeuralNet::backwardFromLabels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::backwardFromLabels",1,"NeuralNet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NeuralNet::backwardFromLabels",2,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_backwardFromLabels",1,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("NeuralNet_backwardFromLabels",2,SWIGTYPE_p_int);
  }
  
  (arg1)->backwardFromLabels((int const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_backward(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("NeuralNet::backward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::backward",1,"NeuralNet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NeuralNet::backward",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_backward",1,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NeuralNet_backward",2,SWIGTYPE_p_float);
  }
  
  (arg1)->backward((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_calcNumRight(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("NeuralNet::calcNumRight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::calcNumRight",1,"NeuralNet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NeuralNet::calcNumRight",2,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_calcNumRight",1,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("NeuralNet_calcNumRight",2,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->calcNumRight((int const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_getOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("NeuralNet::getOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::getOutput",1,"NeuralNet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_getOutput",1,SWIGTYPE_p_NeuralNet);
  }
  
  result = (float *)((NeuralNet const *)arg1)->getOutput();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_getOutputSize(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  int result;
  
  SWIG_check_num_args("NeuralNet::getOutputSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::getOutputSize",1,"NeuralNet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_getOutputSize",1,SWIGTYPE_p_NeuralNet);
  }
  
  result = (int)((NeuralNet const *)arg1)->getOutputSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_asString(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  std::string result;
  
  SWIG_check_num_args("NeuralNet::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::asString",1,"NeuralNet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_asString",1,SWIGTYPE_p_NeuralNet);
  }
  
  result = (arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_getOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("NeuralNet::getOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NeuralNet::getOutput",1,"NeuralNet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NeuralNet::getOutput",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NeuralNet_getOutput",1,SWIGTYPE_p_NeuralNet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NeuralNet_getOutput",2,SWIGTYPE_p_float);
  }
  
  NeuralNet_getOutput__SWIG_1(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeuralNet_getOutput(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NeuralNet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NeuralNet_getOutput__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NeuralNet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NeuralNet_getOutput__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NeuralNet_getOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NeuralNet::getOutput() const\n"
    "    NeuralNet::getOutput(float *)\n");
  lua_error(L);return 0;
}


static void swig_delete_NeuralNet(void *obj) {
NeuralNet *arg1 = (NeuralNet *) obj;
delete arg1;
}
static swig_lua_method swig_NeuralNet_methods[] = {
    {"addLayer", _wrap_NeuralNet_addLayer}, 
    {"setBatchSize", _wrap_NeuralNet_setBatchSize}, 
    {"forward", _wrap_NeuralNet_forward}, 
    {"backwardFromLabels", _wrap_NeuralNet_backwardFromLabels}, 
    {"backward", _wrap_NeuralNet_backward}, 
    {"calcNumRight", _wrap_NeuralNet_calcNumRight}, 
    {"getOutputSize", _wrap_NeuralNet_getOutputSize}, 
    {"asString", _wrap_NeuralNet_asString}, 
    {"getOutput", _wrap_NeuralNet_getOutput}, 
    {0,0}
};
static swig_lua_attribute swig_NeuralNet_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_NeuralNet_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NeuralNet_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_NeuralNet_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_NeuralNet_bases[] = {0};
static const char *swig_NeuralNet_base_names[] = {0};
static swig_lua_class _wrap_class_NeuralNet = { "NeuralNet", &SWIGTYPE_p_NeuralNet,_wrap_new_NeuralNet, swig_delete_NeuralNet, swig_NeuralNet_methods, swig_NeuralNet_attributes, { "NeuralNet", swig_NeuralNet_cls_methods, swig_NeuralNet_cls_attributes, swig_NeuralNet_cls_constants }, swig_NeuralNet_bases, swig_NeuralNet_base_names };

static int _wrap_NetdefToNet_createNetFromNetdef(lua_State* L) {
  int SWIG_arg = 0;
  NeuralNet *arg1 = (NeuralNet *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("NetdefToNet::createNetFromNetdef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetdefToNet::createNetFromNetdef",1,"NeuralNet *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetdefToNet::createNetFromNetdef",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("NetdefToNet_createNetFromNetdef",1,SWIGTYPE_p_NeuralNet);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)NetdefToNet::createNetFromNetdef(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetdefToNet(lua_State* L) {
  int SWIG_arg = 0;
  NetdefToNet *result = 0 ;
  
  SWIG_check_num_args("NetdefToNet::NetdefToNet",0,0)
  result = (NetdefToNet *)new NetdefToNet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetdefToNet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetdefToNet(void *obj) {
NetdefToNet *arg1 = (NetdefToNet *) obj;
delete arg1;
}
static swig_lua_method swig_NetdefToNet_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_NetdefToNet_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_NetdefToNet_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetdefToNet_cls_methods[] = {
    {"createNetFromNetdef", _wrap_NetdefToNet_createNetFromNetdef}, 
    {0,0}
};
static swig_lua_const_info swig_NetdefToNet_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_NetdefToNet_bases[] = {0};
static const char *swig_NetdefToNet_base_names[] = {0};
static swig_lua_class _wrap_class_NetdefToNet = { "NetdefToNet", &SWIGTYPE_p_NetdefToNet,_wrap_new_NetdefToNet, swig_delete_NetdefToNet, swig_NetdefToNet_methods, swig_NetdefToNet_attributes, { "NetdefToNet", swig_NetdefToNet_cls_methods, swig_NetdefToNet_cls_attributes, swig_NetdefToNet_cls_constants }, swig_NetdefToNet_bases, swig_NetdefToNet_base_names };

static int _wrap_new_NetLearner(lua_State* L) {
  int SWIG_arg = 0;
  Trainer *arg1 = (Trainer *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  NetLearner *result = 0 ;
  
  SWIG_check_num_args("NetLearner::NetLearner",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::NetLearner",1,"Trainer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetLearner::NetLearner",2,"NeuralNet *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetLearner::NetLearner",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("NetLearner::NetLearner",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("NetLearner::NetLearner",5,"int *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("NetLearner::NetLearner",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("NetLearner::NetLearner",7,"float *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("NetLearner::NetLearner",8,"int *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("NetLearner::NetLearner",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trainer,0))){
    SWIG_fail_ptr("new_NetLearner",1,SWIGTYPE_p_Trainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("new_NetLearner",2,SWIGTYPE_p_NeuralNet);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_NetLearner",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_NetLearner",5,SWIGTYPE_p_int);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_NetLearner",7,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_NetLearner",8,SWIGTYPE_p_int);
  }
  
  arg9 = (int)lua_tonumber(L, 9);
  result = (NetLearner *)new NetLearner(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetLearner,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_setSchedule__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("NetLearner::setSchedule",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::setSchedule",1,"NetLearner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetLearner::setSchedule",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_setSchedule",1,SWIGTYPE_p_NetLearner);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSchedule(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_setDumpTimings(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("NetLearner::setDumpTimings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::setDumpTimings",1,"NetLearner *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("NetLearner::setDumpTimings",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_setDumpTimings",1,SWIGTYPE_p_NetLearner);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDumpTimings(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_setSchedule__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("NetLearner::setSchedule",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::setSchedule",1,"NetLearner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetLearner::setSchedule",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetLearner::setSchedule",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_setSchedule",1,SWIGTYPE_p_NetLearner);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSchedule(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_setSchedule(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetLearner, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetLearner_setSchedule__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetLearner, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetLearner_setSchedule__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetLearner_setSchedule'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetLearner::setSchedule(int)\n"
    "    NetLearner::setSchedule(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_NetLearner_reset(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  
  SWIG_check_num_args("NetLearner::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::reset",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_reset",1,SWIGTYPE_p_NetLearner);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_tickBatch(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetLearner::tickBatch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::tickBatch",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_tickBatch",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (bool)(arg1)->tickBatch();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_getEpochDone(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetLearner::getEpochDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::getEpochDone",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_getEpochDone",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (bool)(arg1)->getEpochDone();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_getNextEpoch(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  int result;
  
  SWIG_check_num_args("NetLearner::getNextEpoch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::getNextEpoch",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_getNextEpoch",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (int)(arg1)->getNextEpoch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_getNextBatch(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  int result;
  
  SWIG_check_num_args("NetLearner::getNextBatch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::getNextBatch",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_getNextBatch",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (int)(arg1)->getNextBatch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_getNTrain(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  int result;
  
  SWIG_check_num_args("NetLearner::getNTrain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::getNTrain",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_getNTrain",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (int)(arg1)->getNTrain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_getBatchNumRight(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  int result;
  
  SWIG_check_num_args("NetLearner::getBatchNumRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::getBatchNumRight",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_getBatchNumRight",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (int)(arg1)->getBatchNumRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_getBatchLoss(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  float result;
  
  SWIG_check_num_args("NetLearner::getBatchLoss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::getBatchLoss",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_getBatchLoss",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (float)(arg1)->getBatchLoss();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_setBatchState(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("NetLearner::setBatchState",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::setBatchState",1,"NetLearner *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetLearner::setBatchState",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetLearner::setBatchState",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetLearner::setBatchState",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_setBatchState",1,SWIGTYPE_p_NetLearner);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setBatchState(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_tickEpoch(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetLearner::tickEpoch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::tickEpoch",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_tickEpoch",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (bool)(arg1)->tickEpoch();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_run(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  
  SWIG_check_num_args("NetLearner::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::run",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_run",1,SWIGTYPE_p_NetLearner);
  }
  
  (arg1)->run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetLearner_isLearningDone(lua_State* L) {
  int SWIG_arg = 0;
  NetLearner *arg1 = (NetLearner *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetLearner::isLearningDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetLearner::isLearningDone",1,"NetLearner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetLearner,0))){
    SWIG_fail_ptr("NetLearner_isLearningDone",1,SWIGTYPE_p_NetLearner);
  }
  
  result = (bool)(arg1)->isLearningDone();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetLearner(void *obj) {
NetLearner *arg1 = (NetLearner *) obj;
delete arg1;
}
static swig_lua_method swig_NetLearner_methods[] = {
    {"setDumpTimings", _wrap_NetLearner_setDumpTimings}, 
    {"setSchedule", _wrap_NetLearner_setSchedule}, 
    {"reset", _wrap_NetLearner_reset}, 
    {"tickBatch", _wrap_NetLearner_tickBatch}, 
    {"getEpochDone", _wrap_NetLearner_getEpochDone}, 
    {"getNextEpoch", _wrap_NetLearner_getNextEpoch}, 
    {"getNextBatch", _wrap_NetLearner_getNextBatch}, 
    {"getNTrain", _wrap_NetLearner_getNTrain}, 
    {"getBatchNumRight", _wrap_NetLearner_getBatchNumRight}, 
    {"getBatchLoss", _wrap_NetLearner_getBatchLoss}, 
    {"setBatchState", _wrap_NetLearner_setBatchState}, 
    {"tickEpoch", _wrap_NetLearner_tickEpoch}, 
    {"run", _wrap_NetLearner_run}, 
    {"isLearningDone", _wrap_NetLearner_isLearningDone}, 
    {0,0}
};
static swig_lua_attribute swig_NetLearner_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_NetLearner_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetLearner_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_NetLearner_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_NetLearner_bases[] = {0};
static const char *swig_NetLearner_base_names[] = {0};
static swig_lua_class _wrap_class_NetLearner = { "NetLearner", &SWIGTYPE_p_NetLearner,_wrap_new_NetLearner, swig_delete_NetLearner, swig_NetLearner_methods, swig_NetLearner_attributes, { "NetLearner", swig_NetLearner_cls_methods, swig_NetLearner_cls_attributes, swig_NetLearner_cls_constants }, swig_NetLearner_bases, swig_NetLearner_base_names };

static int _wrap_new_NormalizationLayerMaker(lua_State* L) {
  int SWIG_arg = 0;
  NormalizationLayerMaker *result = 0 ;
  
  SWIG_check_num_args("NormalizationLayerMaker::NormalizationLayerMaker",0,0)
  result = (NormalizationLayerMaker *)new NormalizationLayerMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NormalizationLayerMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NormalizationLayerMaker_translate(lua_State* L) {
  int SWIG_arg = 0;
  NormalizationLayerMaker *arg1 = (NormalizationLayerMaker *) 0 ;
  float arg2 ;
  NormalizationLayerMaker *result = 0 ;
  
  SWIG_check_num_args("NormalizationLayerMaker::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NormalizationLayerMaker::translate",1,"NormalizationLayerMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NormalizationLayerMaker::translate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NormalizationLayerMaker,0))){
    SWIG_fail_ptr("NormalizationLayerMaker_translate",1,SWIGTYPE_p_NormalizationLayerMaker);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (NormalizationLayerMaker *)(arg1)->translate(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NormalizationLayerMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NormalizationLayerMaker_scale(lua_State* L) {
  int SWIG_arg = 0;
  NormalizationLayerMaker *arg1 = (NormalizationLayerMaker *) 0 ;
  float arg2 ;
  NormalizationLayerMaker *result = 0 ;
  
  SWIG_check_num_args("NormalizationLayerMaker::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NormalizationLayerMaker::scale",1,"NormalizationLayerMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NormalizationLayerMaker::scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NormalizationLayerMaker,0))){
    SWIG_fail_ptr("NormalizationLayerMaker_scale",1,SWIGTYPE_p_NormalizationLayerMaker);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (NormalizationLayerMaker *)(arg1)->scale(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NormalizationLayerMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NormalizationLayerMaker(void *obj) {
NormalizationLayerMaker *arg1 = (NormalizationLayerMaker *) obj;
delete arg1;
}
static swig_lua_method swig_NormalizationLayerMaker_methods[] = {
    {"translate", _wrap_NormalizationLayerMaker_translate}, 
    {"scale", _wrap_NormalizationLayerMaker_scale}, 
    {0,0}
};
static swig_lua_attribute swig_NormalizationLayerMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_NormalizationLayerMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NormalizationLayerMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_NormalizationLayerMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_NormalizationLayerMaker_bases[] = {0};
static const char *swig_NormalizationLayerMaker_base_names[] = {0};
static swig_lua_class _wrap_class_NormalizationLayerMaker = { "NormalizationLayerMaker", &SWIGTYPE_p_NormalizationLayerMaker,_wrap_new_NormalizationLayerMaker, swig_delete_NormalizationLayerMaker, swig_NormalizationLayerMaker_methods, swig_NormalizationLayerMaker_attributes, { "NormalizationLayerMaker", swig_NormalizationLayerMaker_cls_methods, swig_NormalizationLayerMaker_cls_attributes, swig_NormalizationLayerMaker_cls_constants }, swig_NormalizationLayerMaker_bases, swig_NormalizationLayerMaker_base_names };

static int _wrap_new_InputLayerMaker(lua_State* L) {
  int SWIG_arg = 0;
  InputLayerMaker *result = 0 ;
  
  SWIG_check_num_args("InputLayerMaker::InputLayerMaker",0,0)
  result = (InputLayerMaker *)new InputLayerMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_InputLayerMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputLayerMaker_numPlanes(lua_State* L) {
  int SWIG_arg = 0;
  InputLayerMaker *arg1 = (InputLayerMaker *) 0 ;
  int arg2 ;
  InputLayerMaker *result = 0 ;
  
  SWIG_check_num_args("InputLayerMaker::numPlanes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputLayerMaker::numPlanes",1,"InputLayerMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InputLayerMaker::numPlanes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputLayerMaker,0))){
    SWIG_fail_ptr("InputLayerMaker_numPlanes",1,SWIGTYPE_p_InputLayerMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (InputLayerMaker *)(arg1)->numPlanes(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_InputLayerMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputLayerMaker_imageSize(lua_State* L) {
  int SWIG_arg = 0;
  InputLayerMaker *arg1 = (InputLayerMaker *) 0 ;
  int arg2 ;
  InputLayerMaker *result = 0 ;
  
  SWIG_check_num_args("InputLayerMaker::imageSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputLayerMaker::imageSize",1,"InputLayerMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InputLayerMaker::imageSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputLayerMaker,0))){
    SWIG_fail_ptr("InputLayerMaker_imageSize",1,SWIGTYPE_p_InputLayerMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (InputLayerMaker *)(arg1)->imageSize(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_InputLayerMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputLayerMaker(void *obj) {
InputLayerMaker *arg1 = (InputLayerMaker *) obj;
delete arg1;
}
static swig_lua_method swig_InputLayerMaker_methods[] = {
    {"numPlanes", _wrap_InputLayerMaker_numPlanes}, 
    {"imageSize", _wrap_InputLayerMaker_imageSize}, 
    {0,0}
};
static swig_lua_attribute swig_InputLayerMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_InputLayerMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InputLayerMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_InputLayerMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_InputLayerMaker_bases[] = {0};
static const char *swig_InputLayerMaker_base_names[] = {0};
static swig_lua_class _wrap_class_InputLayerMaker = { "InputLayerMaker", &SWIGTYPE_p_InputLayerMaker,_wrap_new_InputLayerMaker, swig_delete_InputLayerMaker, swig_InputLayerMaker_methods, swig_InputLayerMaker_attributes, { "InputLayerMaker", swig_InputLayerMaker_cls_methods, swig_InputLayerMaker_cls_attributes, swig_InputLayerMaker_cls_constants }, swig_InputLayerMaker_bases, swig_InputLayerMaker_base_names };

static int _wrap_new_ActivationMaker(lua_State* L) {
  int SWIG_arg = 0;
  ActivationMaker *result = 0 ;
  
  SWIG_check_num_args("ActivationMaker::ActivationMaker",0,0)
  result = (ActivationMaker *)new ActivationMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ActivationMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivationMaker_relu(lua_State* L) {
  int SWIG_arg = 0;
  ActivationMaker *arg1 = (ActivationMaker *) 0 ;
  ActivationMaker *result = 0 ;
  
  SWIG_check_num_args("ActivationMaker::relu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ActivationMaker::relu",1,"ActivationMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ActivationMaker,0))){
    SWIG_fail_ptr("ActivationMaker_relu",1,SWIGTYPE_p_ActivationMaker);
  }
  
  result = (ActivationMaker *)(arg1)->relu();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ActivationMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivationMaker_linear(lua_State* L) {
  int SWIG_arg = 0;
  ActivationMaker *arg1 = (ActivationMaker *) 0 ;
  ActivationMaker *result = 0 ;
  
  SWIG_check_num_args("ActivationMaker::linear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ActivationMaker::linear",1,"ActivationMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ActivationMaker,0))){
    SWIG_fail_ptr("ActivationMaker_linear",1,SWIGTYPE_p_ActivationMaker);
  }
  
  result = (ActivationMaker *)(arg1)->linear();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ActivationMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivationMaker_tanh(lua_State* L) {
  int SWIG_arg = 0;
  ActivationMaker *arg1 = (ActivationMaker *) 0 ;
  ActivationMaker *result = 0 ;
  
  SWIG_check_num_args("ActivationMaker::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ActivationMaker::tanh",1,"ActivationMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ActivationMaker,0))){
    SWIG_fail_ptr("ActivationMaker_tanh",1,SWIGTYPE_p_ActivationMaker);
  }
  
  result = (ActivationMaker *)(arg1)->tanh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ActivationMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActivationMaker_sigmoid(lua_State* L) {
  int SWIG_arg = 0;
  ActivationMaker *arg1 = (ActivationMaker *) 0 ;
  ActivationMaker *result = 0 ;
  
  SWIG_check_num_args("ActivationMaker::sigmoid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ActivationMaker::sigmoid",1,"ActivationMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ActivationMaker,0))){
    SWIG_fail_ptr("ActivationMaker_sigmoid",1,SWIGTYPE_p_ActivationMaker);
  }
  
  result = (ActivationMaker *)(arg1)->sigmoid();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ActivationMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActivationMaker(void *obj) {
ActivationMaker *arg1 = (ActivationMaker *) obj;
delete arg1;
}
static swig_lua_method swig_ActivationMaker_methods[] = {
    {"relu", _wrap_ActivationMaker_relu}, 
    {"linear", _wrap_ActivationMaker_linear}, 
    {"tanh", _wrap_ActivationMaker_tanh}, 
    {"sigmoid", _wrap_ActivationMaker_sigmoid}, 
    {0,0}
};
static swig_lua_attribute swig_ActivationMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ActivationMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ActivationMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ActivationMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ActivationMaker_bases[] = {0};
static const char *swig_ActivationMaker_base_names[] = {0};
static swig_lua_class _wrap_class_ActivationMaker = { "ActivationMaker", &SWIGTYPE_p_ActivationMaker,_wrap_new_ActivationMaker, swig_delete_ActivationMaker, swig_ActivationMaker_methods, swig_ActivationMaker_attributes, { "ActivationMaker", swig_ActivationMaker_cls_methods, swig_ActivationMaker_cls_attributes, swig_ActivationMaker_cls_constants }, swig_ActivationMaker_bases, swig_ActivationMaker_base_names };

static int _wrap_new_DropoutMaker(lua_State* L) {
  int SWIG_arg = 0;
  DropoutMaker *result = 0 ;
  
  SWIG_check_num_args("DropoutMaker::DropoutMaker",0,0)
  result = (DropoutMaker *)new DropoutMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DropoutMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DropoutMaker_dropRatio(lua_State* L) {
  int SWIG_arg = 0;
  DropoutMaker *arg1 = (DropoutMaker *) 0 ;
  float arg2 ;
  DropoutMaker *result = 0 ;
  
  SWIG_check_num_args("DropoutMaker::dropRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DropoutMaker::dropRatio",1,"DropoutMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DropoutMaker::dropRatio",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DropoutMaker,0))){
    SWIG_fail_ptr("DropoutMaker_dropRatio",1,SWIGTYPE_p_DropoutMaker);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (DropoutMaker *)(arg1)->dropRatio(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DropoutMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DropoutMaker(void *obj) {
DropoutMaker *arg1 = (DropoutMaker *) obj;
delete arg1;
}
static swig_lua_method swig_DropoutMaker_methods[] = {
    {"dropRatio", _wrap_DropoutMaker_dropRatio}, 
    {0,0}
};
static swig_lua_attribute swig_DropoutMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DropoutMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DropoutMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DropoutMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DropoutMaker_bases[] = {0};
static const char *swig_DropoutMaker_base_names[] = {0};
static swig_lua_class _wrap_class_DropoutMaker = { "DropoutMaker", &SWIGTYPE_p_DropoutMaker,_wrap_new_DropoutMaker, swig_delete_DropoutMaker, swig_DropoutMaker_methods, swig_DropoutMaker_attributes, { "DropoutMaker", swig_DropoutMaker_cls_methods, swig_DropoutMaker_cls_attributes, swig_DropoutMaker_cls_constants }, swig_DropoutMaker_bases, swig_DropoutMaker_base_names };

static int _wrap_new_ConvolutionalMaker(lua_State* L) {
  int SWIG_arg = 0;
  ConvolutionalMaker *result = 0 ;
  
  SWIG_check_num_args("ConvolutionalMaker::ConvolutionalMaker",0,0)
  result = (ConvolutionalMaker *)new ConvolutionalMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConvolutionalMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionalMaker_numFilters(lua_State* L) {
  int SWIG_arg = 0;
  ConvolutionalMaker *arg1 = (ConvolutionalMaker *) 0 ;
  int arg2 ;
  ConvolutionalMaker *result = 0 ;
  
  SWIG_check_num_args("ConvolutionalMaker::numFilters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConvolutionalMaker::numFilters",1,"ConvolutionalMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConvolutionalMaker::numFilters",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConvolutionalMaker,0))){
    SWIG_fail_ptr("ConvolutionalMaker_numFilters",1,SWIGTYPE_p_ConvolutionalMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ConvolutionalMaker *)(arg1)->numFilters(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConvolutionalMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionalMaker_filterSize(lua_State* L) {
  int SWIG_arg = 0;
  ConvolutionalMaker *arg1 = (ConvolutionalMaker *) 0 ;
  int arg2 ;
  ConvolutionalMaker *result = 0 ;
  
  SWIG_check_num_args("ConvolutionalMaker::filterSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConvolutionalMaker::filterSize",1,"ConvolutionalMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConvolutionalMaker::filterSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConvolutionalMaker,0))){
    SWIG_fail_ptr("ConvolutionalMaker_filterSize",1,SWIGTYPE_p_ConvolutionalMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ConvolutionalMaker *)(arg1)->filterSize(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConvolutionalMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionalMaker_padZeros__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ConvolutionalMaker *arg1 = (ConvolutionalMaker *) 0 ;
  ConvolutionalMaker *result = 0 ;
  
  SWIG_check_num_args("ConvolutionalMaker::padZeros",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConvolutionalMaker::padZeros",1,"ConvolutionalMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConvolutionalMaker,0))){
    SWIG_fail_ptr("ConvolutionalMaker_padZeros",1,SWIGTYPE_p_ConvolutionalMaker);
  }
  
  result = (ConvolutionalMaker *)(arg1)->padZeros();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConvolutionalMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionalMaker_padZeros__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ConvolutionalMaker *arg1 = (ConvolutionalMaker *) 0 ;
  bool arg2 ;
  ConvolutionalMaker *result = 0 ;
  
  SWIG_check_num_args("ConvolutionalMaker::padZeros",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConvolutionalMaker::padZeros",1,"ConvolutionalMaker *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ConvolutionalMaker::padZeros",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConvolutionalMaker,0))){
    SWIG_fail_ptr("ConvolutionalMaker_padZeros",1,SWIGTYPE_p_ConvolutionalMaker);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (ConvolutionalMaker *)(arg1)->padZeros(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConvolutionalMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionalMaker_padZeros(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ConvolutionalMaker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvolutionalMaker_padZeros__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ConvolutionalMaker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ConvolutionalMaker_padZeros__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConvolutionalMaker_padZeros'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConvolutionalMaker::padZeros()\n"
    "    ConvolutionalMaker::padZeros(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_ConvolutionalMaker_biased__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ConvolutionalMaker *arg1 = (ConvolutionalMaker *) 0 ;
  ConvolutionalMaker *result = 0 ;
  
  SWIG_check_num_args("ConvolutionalMaker::biased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConvolutionalMaker::biased",1,"ConvolutionalMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConvolutionalMaker,0))){
    SWIG_fail_ptr("ConvolutionalMaker_biased",1,SWIGTYPE_p_ConvolutionalMaker);
  }
  
  result = (ConvolutionalMaker *)(arg1)->biased();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConvolutionalMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionalMaker_biased__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ConvolutionalMaker *arg1 = (ConvolutionalMaker *) 0 ;
  int arg2 ;
  ConvolutionalMaker *result = 0 ;
  
  SWIG_check_num_args("ConvolutionalMaker::biased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConvolutionalMaker::biased",1,"ConvolutionalMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConvolutionalMaker::biased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ConvolutionalMaker,0))){
    SWIG_fail_ptr("ConvolutionalMaker_biased",1,SWIGTYPE_p_ConvolutionalMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (ConvolutionalMaker *)(arg1)->biased(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ConvolutionalMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionalMaker_biased(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ConvolutionalMaker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvolutionalMaker_biased__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ConvolutionalMaker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ConvolutionalMaker_biased__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConvolutionalMaker_biased'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConvolutionalMaker::biased()\n"
    "    ConvolutionalMaker::biased(int)\n");
  lua_error(L);return 0;
}


static void swig_delete_ConvolutionalMaker(void *obj) {
ConvolutionalMaker *arg1 = (ConvolutionalMaker *) obj;
delete arg1;
}
static swig_lua_method swig_ConvolutionalMaker_methods[] = {
    {"numFilters", _wrap_ConvolutionalMaker_numFilters}, 
    {"filterSize", _wrap_ConvolutionalMaker_filterSize}, 
    {"padZeros", _wrap_ConvolutionalMaker_padZeros}, 
    {"biased", _wrap_ConvolutionalMaker_biased}, 
    {0,0}
};
static swig_lua_attribute swig_ConvolutionalMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ConvolutionalMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ConvolutionalMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ConvolutionalMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ConvolutionalMaker_bases[] = {0};
static const char *swig_ConvolutionalMaker_base_names[] = {0};
static swig_lua_class _wrap_class_ConvolutionalMaker = { "ConvolutionalMaker", &SWIGTYPE_p_ConvolutionalMaker,_wrap_new_ConvolutionalMaker, swig_delete_ConvolutionalMaker, swig_ConvolutionalMaker_methods, swig_ConvolutionalMaker_attributes, { "ConvolutionalMaker", swig_ConvolutionalMaker_cls_methods, swig_ConvolutionalMaker_cls_attributes, swig_ConvolutionalMaker_cls_constants }, swig_ConvolutionalMaker_bases, swig_ConvolutionalMaker_base_names };

static int _wrap_new_FullyConnectedMaker(lua_State* L) {
  int SWIG_arg = 0;
  FullyConnectedMaker *result = 0 ;
  
  SWIG_check_num_args("FullyConnectedMaker::FullyConnectedMaker",0,0)
  result = (FullyConnectedMaker *)new FullyConnectedMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FullyConnectedMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FullyConnectedMaker_numPlanes(lua_State* L) {
  int SWIG_arg = 0;
  FullyConnectedMaker *arg1 = (FullyConnectedMaker *) 0 ;
  int arg2 ;
  FullyConnectedMaker *result = 0 ;
  
  SWIG_check_num_args("FullyConnectedMaker::numPlanes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FullyConnectedMaker::numPlanes",1,"FullyConnectedMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FullyConnectedMaker::numPlanes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FullyConnectedMaker,0))){
    SWIG_fail_ptr("FullyConnectedMaker_numPlanes",1,SWIGTYPE_p_FullyConnectedMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (FullyConnectedMaker *)(arg1)->numPlanes(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FullyConnectedMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FullyConnectedMaker_imageSize(lua_State* L) {
  int SWIG_arg = 0;
  FullyConnectedMaker *arg1 = (FullyConnectedMaker *) 0 ;
  int arg2 ;
  FullyConnectedMaker *result = 0 ;
  
  SWIG_check_num_args("FullyConnectedMaker::imageSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FullyConnectedMaker::imageSize",1,"FullyConnectedMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FullyConnectedMaker::imageSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FullyConnectedMaker,0))){
    SWIG_fail_ptr("FullyConnectedMaker_imageSize",1,SWIGTYPE_p_FullyConnectedMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (FullyConnectedMaker *)(arg1)->imageSize(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FullyConnectedMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FullyConnectedMaker_biased__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FullyConnectedMaker *arg1 = (FullyConnectedMaker *) 0 ;
  FullyConnectedMaker *result = 0 ;
  
  SWIG_check_num_args("FullyConnectedMaker::biased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FullyConnectedMaker::biased",1,"FullyConnectedMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FullyConnectedMaker,0))){
    SWIG_fail_ptr("FullyConnectedMaker_biased",1,SWIGTYPE_p_FullyConnectedMaker);
  }
  
  result = (FullyConnectedMaker *)(arg1)->biased();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FullyConnectedMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FullyConnectedMaker_biased__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FullyConnectedMaker *arg1 = (FullyConnectedMaker *) 0 ;
  int arg2 ;
  FullyConnectedMaker *result = 0 ;
  
  SWIG_check_num_args("FullyConnectedMaker::biased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FullyConnectedMaker::biased",1,"FullyConnectedMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FullyConnectedMaker::biased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FullyConnectedMaker,0))){
    SWIG_fail_ptr("FullyConnectedMaker_biased",1,SWIGTYPE_p_FullyConnectedMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (FullyConnectedMaker *)(arg1)->biased(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FullyConnectedMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FullyConnectedMaker_biased(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FullyConnectedMaker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FullyConnectedMaker_biased__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FullyConnectedMaker, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FullyConnectedMaker_biased__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FullyConnectedMaker_biased'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FullyConnectedMaker::biased()\n"
    "    FullyConnectedMaker::biased(int)\n");
  lua_error(L);return 0;
}


static void swig_delete_FullyConnectedMaker(void *obj) {
FullyConnectedMaker *arg1 = (FullyConnectedMaker *) obj;
delete arg1;
}
static swig_lua_method swig_FullyConnectedMaker_methods[] = {
    {"numPlanes", _wrap_FullyConnectedMaker_numPlanes}, 
    {"imageSize", _wrap_FullyConnectedMaker_imageSize}, 
    {"biased", _wrap_FullyConnectedMaker_biased}, 
    {0,0}
};
static swig_lua_attribute swig_FullyConnectedMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_FullyConnectedMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FullyConnectedMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_FullyConnectedMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_FullyConnectedMaker_bases[] = {0};
static const char *swig_FullyConnectedMaker_base_names[] = {0};
static swig_lua_class _wrap_class_FullyConnectedMaker = { "FullyConnectedMaker", &SWIGTYPE_p_FullyConnectedMaker,_wrap_new_FullyConnectedMaker, swig_delete_FullyConnectedMaker, swig_FullyConnectedMaker_methods, swig_FullyConnectedMaker_attributes, { "FullyConnectedMaker", swig_FullyConnectedMaker_cls_methods, swig_FullyConnectedMaker_cls_attributes, swig_FullyConnectedMaker_cls_constants }, swig_FullyConnectedMaker_bases, swig_FullyConnectedMaker_base_names };

static int _wrap_new_PoolingMaker(lua_State* L) {
  int SWIG_arg = 0;
  PoolingMaker *result = 0 ;
  
  SWIG_check_num_args("PoolingMaker::PoolingMaker",0,0)
  result = (PoolingMaker *)new PoolingMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PoolingMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoolingMaker_poolingSize(lua_State* L) {
  int SWIG_arg = 0;
  PoolingMaker *arg1 = (PoolingMaker *) 0 ;
  int arg2 ;
  PoolingMaker *result = 0 ;
  
  SWIG_check_num_args("PoolingMaker::poolingSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PoolingMaker::poolingSize",1,"PoolingMaker *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PoolingMaker::poolingSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PoolingMaker,0))){
    SWIG_fail_ptr("PoolingMaker_poolingSize",1,SWIGTYPE_p_PoolingMaker);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (PoolingMaker *)(arg1)->poolingSize(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PoolingMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PoolingMaker(void *obj) {
PoolingMaker *arg1 = (PoolingMaker *) obj;
delete arg1;
}
static swig_lua_method swig_PoolingMaker_methods[] = {
    {"poolingSize", _wrap_PoolingMaker_poolingSize}, 
    {0,0}
};
static swig_lua_attribute swig_PoolingMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_PoolingMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PoolingMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_PoolingMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_PoolingMaker_bases[] = {0};
static const char *swig_PoolingMaker_base_names[] = {0};
static swig_lua_class _wrap_class_PoolingMaker = { "PoolingMaker", &SWIGTYPE_p_PoolingMaker,_wrap_new_PoolingMaker, swig_delete_PoolingMaker, swig_PoolingMaker_methods, swig_PoolingMaker_attributes, { "PoolingMaker", swig_PoolingMaker_cls_methods, swig_PoolingMaker_cls_attributes, swig_PoolingMaker_cls_constants }, swig_PoolingMaker_bases, swig_PoolingMaker_base_names };

static int _wrap_new_SoftMaxMaker(lua_State* L) {
  int SWIG_arg = 0;
  SoftMaxMaker *result = 0 ;
  
  SWIG_check_num_args("SoftMaxMaker::SoftMaxMaker",0,0)
  result = (SoftMaxMaker *)new SoftMaxMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoftMaxMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftMaxMaker_perColumn(lua_State* L) {
  int SWIG_arg = 0;
  SoftMaxMaker *arg1 = (SoftMaxMaker *) 0 ;
  SoftMaxMaker *result = 0 ;
  
  SWIG_check_num_args("SoftMaxMaker::perColumn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftMaxMaker::perColumn",1,"SoftMaxMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftMaxMaker,0))){
    SWIG_fail_ptr("SoftMaxMaker_perColumn",1,SWIGTYPE_p_SoftMaxMaker);
  }
  
  result = (SoftMaxMaker *)(arg1)->perColumn();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoftMaxMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftMaxMaker_perPlane(lua_State* L) {
  int SWIG_arg = 0;
  SoftMaxMaker *arg1 = (SoftMaxMaker *) 0 ;
  SoftMaxMaker *result = 0 ;
  
  SWIG_check_num_args("SoftMaxMaker::perPlane",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftMaxMaker::perPlane",1,"SoftMaxMaker *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftMaxMaker,0))){
    SWIG_fail_ptr("SoftMaxMaker_perPlane",1,SWIGTYPE_p_SoftMaxMaker);
  }
  
  result = (SoftMaxMaker *)(arg1)->perPlane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoftMaxMaker,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoftMaxMaker(void *obj) {
SoftMaxMaker *arg1 = (SoftMaxMaker *) obj;
delete arg1;
}
static swig_lua_method swig_SoftMaxMaker_methods[] = {
    {"perColumn", _wrap_SoftMaxMaker_perColumn}, 
    {"perPlane", _wrap_SoftMaxMaker_perPlane}, 
    {0,0}
};
static swig_lua_attribute swig_SoftMaxMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SoftMaxMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoftMaxMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SoftMaxMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SoftMaxMaker_bases[] = {0};
static const char *swig_SoftMaxMaker_base_names[] = {0};
static swig_lua_class _wrap_class_SoftMaxMaker = { "SoftMaxMaker", &SWIGTYPE_p_SoftMaxMaker,_wrap_new_SoftMaxMaker, swig_delete_SoftMaxMaker, swig_SoftMaxMaker_methods, swig_SoftMaxMaker_attributes, { "SoftMaxMaker", swig_SoftMaxMaker_cls_methods, swig_SoftMaxMaker_cls_attributes, swig_SoftMaxMaker_cls_constants }, swig_SoftMaxMaker_bases, swig_SoftMaxMaker_base_names };

static int _wrap_new_SquareLossMaker(lua_State* L) {
  int SWIG_arg = 0;
  SquareLossMaker *result = 0 ;
  
  SWIG_check_num_args("SquareLossMaker::SquareLossMaker",0,0)
  result = (SquareLossMaker *)new SquareLossMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SquareLossMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SquareLossMaker(void *obj) {
SquareLossMaker *arg1 = (SquareLossMaker *) obj;
delete arg1;
}
static swig_lua_method swig_SquareLossMaker_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SquareLossMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SquareLossMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SquareLossMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SquareLossMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SquareLossMaker_bases[] = {0};
static const char *swig_SquareLossMaker_base_names[] = {0};
static swig_lua_class _wrap_class_SquareLossMaker = { "SquareLossMaker", &SWIGTYPE_p_SquareLossMaker,_wrap_new_SquareLossMaker, swig_delete_SquareLossMaker, swig_SquareLossMaker_methods, swig_SquareLossMaker_attributes, { "SquareLossMaker", swig_SquareLossMaker_cls_methods, swig_SquareLossMaker_cls_attributes, swig_SquareLossMaker_cls_constants }, swig_SquareLossMaker_bases, swig_SquareLossMaker_base_names };

static int _wrap_new_CrossEntropyLossMaker(lua_State* L) {
  int SWIG_arg = 0;
  CrossEntropyLossMaker *result = 0 ;
  
  SWIG_check_num_args("CrossEntropyLossMaker::CrossEntropyLossMaker",0,0)
  result = (CrossEntropyLossMaker *)new CrossEntropyLossMaker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CrossEntropyLossMaker,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CrossEntropyLossMaker(void *obj) {
CrossEntropyLossMaker *arg1 = (CrossEntropyLossMaker *) obj;
delete arg1;
}
static swig_lua_method swig_CrossEntropyLossMaker_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CrossEntropyLossMaker_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CrossEntropyLossMaker_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CrossEntropyLossMaker_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CrossEntropyLossMaker_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CrossEntropyLossMaker_bases[] = {0};
static const char *swig_CrossEntropyLossMaker_base_names[] = {0};
static swig_lua_class _wrap_class_CrossEntropyLossMaker = { "CrossEntropyLossMaker", &SWIGTYPE_p_CrossEntropyLossMaker,_wrap_new_CrossEntropyLossMaker, swig_delete_CrossEntropyLossMaker, swig_CrossEntropyLossMaker_methods, swig_CrossEntropyLossMaker_attributes, { "CrossEntropyLossMaker", swig_CrossEntropyLossMaker_cls_methods, swig_CrossEntropyLossMaker_cls_attributes, swig_CrossEntropyLossMaker_cls_constants }, swig_CrossEntropyLossMaker_bases, swig_CrossEntropyLossMaker_base_names };

static int _wrap_new_floatArray(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  floatArray *result = 0 ;
  
  SWIG_check_num_args("floatArray::floatArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floatArray::floatArray",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (floatArray *)new_floatArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_floatArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("floatArray::getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatArray::getitem",1,"floatArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("floatArray::getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_floatArray,0))){
    SWIG_fail_ptr("floatArray___getitem",1,SWIGTYPE_p_floatArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)floatArray_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("floatArray::setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatArray::setitem",1,"floatArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("floatArray::setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("floatArray::setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_floatArray,0))){
    SWIG_fail_ptr("floatArray___setitem",1,SWIGTYPE_p_floatArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  floatArray_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatArray_cast(lua_State* L) {
  int SWIG_arg = 0;
  floatArray *arg1 = (floatArray *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("floatArray::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatArray::cast",1,"floatArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_floatArray,0))){
    SWIG_fail_ptr("floatArray_cast",1,SWIGTYPE_p_floatArray);
  }
  
  result = (float *)floatArray_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatArray_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  floatArray *result = 0 ;
  
  SWIG_check_num_args("floatArray::floatArray_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatArray::floatArray_frompointer",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("floatArray_frompointer",1,SWIGTYPE_p_float);
  }
  
  result = (floatArray *)floatArray_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_floatArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_floatArray(void *obj) {
floatArray *arg1 = (floatArray *) obj;
delete_floatArray(arg1);
}
static swig_lua_method swig_floatArray_methods[] = {
    {"__getitem", _wrap_floatArray___getitem}, 
    {"__setitem", _wrap_floatArray___setitem}, 
    {"cast", _wrap_floatArray_cast}, 
    {0,0}
};
static swig_lua_attribute swig_floatArray_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_floatArray_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_floatArray_cls_methods[] = {
    {"frompointer", _wrap_floatArray_frompointer}, 
    {0,0}
};
static swig_lua_const_info swig_floatArray_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_floatArray_bases[] = {0};
static const char *swig_floatArray_base_names[] = {0};
static swig_lua_class _wrap_class_floatArray = { "floatArray", &SWIGTYPE_p_floatArray,_wrap_new_floatArray, swig_delete_floatArray, swig_floatArray_methods, swig_floatArray_attributes, { "floatArray", swig_floatArray_cls_methods, swig_floatArray_cls_attributes, swig_floatArray_cls_constants }, swig_floatArray_bases, swig_floatArray_base_names };

static int _wrap_new_intArray(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  intArray *result = 0 ;
  
  SWIG_check_num_args("intArray::intArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("intArray::intArray",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (intArray *)new_intArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_intArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  intArray *arg1 = (intArray *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("intArray::getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intArray::getitem",1,"intArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intArray::getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_intArray,0))){
    SWIG_fail_ptr("intArray___getitem",1,SWIGTYPE_p_intArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)intArray_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  intArray *arg1 = (intArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("intArray::setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intArray::setitem",1,"intArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intArray::setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intArray::setitem",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_intArray,0))){
    SWIG_fail_ptr("intArray___setitem",1,SWIGTYPE_p_intArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  intArray_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intArray_cast(lua_State* L) {
  int SWIG_arg = 0;
  intArray *arg1 = (intArray *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("intArray::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intArray::cast",1,"intArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_intArray,0))){
    SWIG_fail_ptr("intArray_cast",1,SWIGTYPE_p_intArray);
  }
  
  result = (int *)intArray_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intArray_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  intArray *result = 0 ;
  
  SWIG_check_num_args("intArray::intArray_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intArray::intArray_frompointer",1,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("intArray_frompointer",1,SWIGTYPE_p_int);
  }
  
  result = (intArray *)intArray_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_intArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_intArray(void *obj) {
intArray *arg1 = (intArray *) obj;
delete_intArray(arg1);
}
static swig_lua_method swig_intArray_methods[] = {
    {"__getitem", _wrap_intArray___getitem}, 
    {"__setitem", _wrap_intArray___setitem}, 
    {"cast", _wrap_intArray_cast}, 
    {0,0}
};
static swig_lua_attribute swig_intArray_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_intArray_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_intArray_cls_methods[] = {
    {"frompointer", _wrap_intArray_frompointer}, 
    {0,0}
};
static swig_lua_const_info swig_intArray_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_intArray_bases[] = {0};
static const char *swig_intArray_base_names[] = {0};
static swig_lua_class _wrap_class_intArray = { "intArray", &SWIGTYPE_p_intArray,_wrap_new_intArray, swig_delete_intArray, swig_intArray_methods, swig_intArray_attributes, { "intArray", swig_intArray_cls_methods, swig_intArray_cls_attributes, swig_intArray_cls_constants }, swig_intArray_bases, swig_intArray_base_names };

static int _wrap_new_QLearner2(lua_State* L) {
  int SWIG_arg = 0;
  Trainer *arg1 = (Trainer *) 0 ;
  NeuralNet *arg2 = (NeuralNet *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QLearner2 *result = 0 ;
  
  SWIG_check_num_args("QLearner2::QLearner2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QLearner2::QLearner2",1,"Trainer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("QLearner2::QLearner2",2,"NeuralNet *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("QLearner2::QLearner2",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("QLearner2::QLearner2",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("QLearner2::QLearner2",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trainer,0))){
    SWIG_fail_ptr("new_QLearner2",1,SWIGTYPE_p_Trainer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NeuralNet,0))){
    SWIG_fail_ptr("new_QLearner2",2,SWIGTYPE_p_NeuralNet);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (QLearner2 *)new QLearner2(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_QLearner2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QLearner2_step(lua_State* L) {
  int SWIG_arg = 0;
  QLearner2 *arg1 = (QLearner2 *) 0 ;
  double arg2 ;
  bool arg3 ;
  float *arg4 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("QLearner2::step",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QLearner2::step",1,"QLearner2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QLearner2::step",2,"double");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("QLearner2::step",3,"bool");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("QLearner2::step",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QLearner2,0))){
    SWIG_fail_ptr("QLearner2_step",1,SWIGTYPE_p_QLearner2);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("QLearner2_step",4,SWIGTYPE_p_float);
  }
  
  result = (int)(arg1)->step(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QLearner2_setLambda(lua_State* L) {
  int SWIG_arg = 0;
  QLearner2 *arg1 = (QLearner2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("QLearner2::setLambda",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QLearner2::setLambda",1,"QLearner2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QLearner2::setLambda",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QLearner2,0))){
    SWIG_fail_ptr("QLearner2_setLambda",1,SWIGTYPE_p_QLearner2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLambda(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QLearner2_setMaxSamples(lua_State* L) {
  int SWIG_arg = 0;
  QLearner2 *arg1 = (QLearner2 *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("QLearner2::setMaxSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QLearner2::setMaxSamples",1,"QLearner2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QLearner2::setMaxSamples",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QLearner2,0))){
    SWIG_fail_ptr("QLearner2_setMaxSamples",1,SWIGTYPE_p_QLearner2);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMaxSamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QLearner2_setEpsilon(lua_State* L) {
  int SWIG_arg = 0;
  QLearner2 *arg1 = (QLearner2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("QLearner2::setEpsilon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("QLearner2::setEpsilon",1,"QLearner2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("QLearner2::setEpsilon",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_QLearner2,0))){
    SWIG_fail_ptr("QLearner2_setEpsilon",1,SWIGTYPE_p_QLearner2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setEpsilon(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_QLearner2(void *obj) {
QLearner2 *arg1 = (QLearner2 *) obj;
delete arg1;
}
static swig_lua_method swig_QLearner2_methods[] = {
    {"step", _wrap_QLearner2_step}, 
    {"setLambda", _wrap_QLearner2_setLambda}, 
    {"setMaxSamples", _wrap_QLearner2_setMaxSamples}, 
    {"setEpsilon", _wrap_QLearner2_setEpsilon}, 
    {0,0}
};
static swig_lua_attribute swig_QLearner2_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_QLearner2_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_QLearner2_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_QLearner2_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_QLearner2_bases[] = {0};
static const char *swig_QLearner2_base_names[] = {0};
static swig_lua_class _wrap_class_QLearner2 = { "QLearner2", &SWIGTYPE_p_QLearner2,_wrap_new_QLearner2, swig_delete_QLearner2, swig_QLearner2_methods, swig_QLearner2_attributes, { "QLearner2", swig_QLearner2_cls_methods, swig_QLearner2_cls_attributes, swig_QLearner2_cls_constants }, swig_QLearner2_bases, swig_QLearner2_base_names };

static int _wrap_new_floatSlice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  floatSlice *result = 0 ;
  
  SWIG_check_num_args("floatSlice::floatSlice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatSlice::floatSlice",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("floatSlice::floatSlice",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_floatSlice",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (floatSlice *)new_floatSlice__SWIG_0(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_floatSlice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_floatSlice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  floatSlice *result = 0 ;
  
  SWIG_check_num_args("floatSlice::floatSlice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatSlice::floatSlice",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_floatSlice",1,SWIGTYPE_p_float);
  }
  
  result = (floatSlice *)new_floatSlice__SWIG_1(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_floatSlice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_floatSlice(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_floatSlice__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_floatSlice__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_floatSlice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    floatSlice::floatSlice(float *,int)\n"
    "    floatSlice::floatSlice(float *)\n");
  lua_error(L);return 0;
}


static int _wrap_floatSlice_cast(lua_State* L) {
  int SWIG_arg = 0;
  floatSlice *arg1 = (floatSlice *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("floatSlice::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatSlice::cast",1,"floatSlice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_floatSlice,0))){
    SWIG_fail_ptr("floatSlice_cast",1,SWIGTYPE_p_floatSlice);
  }
  
  result = (float *)floatSlice_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_floatSlice(void *obj) {
floatSlice *arg1 = (floatSlice *) obj;
delete_floatSlice(arg1);
}
static swig_lua_method swig_floatSlice_methods[] = {
    {"cast", _wrap_floatSlice_cast}, 
    {0,0}
};
static swig_lua_attribute swig_floatSlice_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_floatSlice_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_floatSlice_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_floatSlice_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_floatSlice_bases[] = {0};
static const char *swig_floatSlice_base_names[] = {0};
static swig_lua_class _wrap_class_floatSlice = { "floatSlice", &SWIGTYPE_p_floatSlice,_wrap_new_floatSlice, swig_delete_floatSlice, swig_floatSlice_methods, swig_floatSlice_attributes, { "floatSlice", swig_floatSlice_cls_methods, swig_floatSlice_cls_attributes, swig_floatSlice_cls_constants }, swig_floatSlice_bases, swig_floatSlice_base_names };

static int _wrap_new_intSlice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  intSlice *result = 0 ;
  
  SWIG_check_num_args("intSlice::intSlice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intSlice::intSlice",1,"int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intSlice::intSlice",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_intSlice",1,SWIGTYPE_p_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (intSlice *)new_intSlice__SWIG_0(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_intSlice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_intSlice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  intSlice *result = 0 ;
  
  SWIG_check_num_args("intSlice::intSlice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intSlice::intSlice",1,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_intSlice",1,SWIGTYPE_p_int);
  }
  
  result = (intSlice *)new_intSlice__SWIG_1(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_intSlice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_intSlice(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_intSlice__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_intSlice__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_intSlice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intSlice::intSlice(int *,int)\n"
    "    intSlice::intSlice(int *)\n");
  lua_error(L);return 0;
}


static int _wrap_intSlice_cast(lua_State* L) {
  int SWIG_arg = 0;
  intSlice *arg1 = (intSlice *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("intSlice::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intSlice::cast",1,"intSlice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_intSlice,0))){
    SWIG_fail_ptr("intSlice_cast",1,SWIGTYPE_p_intSlice);
  }
  
  result = (int *)intSlice_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_intSlice(void *obj) {
intSlice *arg1 = (intSlice *) obj;
delete_intSlice(arg1);
}
static swig_lua_method swig_intSlice_methods[] = {
    {"cast", _wrap_intSlice_cast}, 
    {0,0}
};
static swig_lua_attribute swig_intSlice_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_intSlice_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_intSlice_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_intSlice_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_intSlice_bases[] = {0};
static const char *swig_intSlice_base_names[] = {0};
static swig_lua_class _wrap_class_intSlice = { "intSlice", &SWIGTYPE_p_intSlice,_wrap_new_intSlice, swig_delete_intSlice, swig_intSlice_methods, swig_intSlice_attributes, { "intSlice", swig_intSlice_cls_methods, swig_intSlice_cls_attributes, swig_intSlice_cls_constants }, swig_intSlice_bases, swig_intSlice_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "GenericLoader_getDimensions", _wrap_GenericLoader_getDimensions},
    { "GenericLoader_load", _wrap_GenericLoader_load},
    { "EasyCL_createForFirstGpu", _wrap_EasyCL_createForFirstGpu},
    { "EasyCL_createForFirstGpuOtherwiseCpu", _wrap_EasyCL_createForFirstGpuOtherwiseCpu},
    { "EasyCL_createForIndexedGpu", _wrap_EasyCL_createForIndexedGpu},
    { "EasyCL_createForPlatformDeviceIndexes", _wrap_EasyCL_createForPlatformDeviceIndexes},
    { "EasyCL_createForPlatformDeviceIds", _wrap_EasyCL_createForPlatformDeviceIds},
    { "SGD_instance",_wrap_SGD_instance},
    { "Annealer_instance", _wrap_Annealer_instance},
    { "Adagrad_instance", _wrap_Adagrad_instance},
    { "Rmsprop_instance", _wrap_Rmsprop_instance},
    { "Nesterov_instance", _wrap_Nesterov_instance},
    { "NetdefToNet_createNetFromNetdef", _wrap_NetdefToNet_createNetFromNetdef},
    { "floatArray_frompointer", _wrap_floatArray_frompointer},
    { "intArray_frompointer", _wrap_intArray_frompointer},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_floatArrayTo_p_float(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((float *)  ((floatArray *) x));
}
static void *_p_floatSliceTo_p_float(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((float *)  ((floatSlice *) x));
}
static void *_p_DropoutMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((DropoutMaker *) x));
}
static void *_p_SoftMaxMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((SoftMaxMaker *) x));
}
static void *_p_ActivationMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((ActivationMaker *) x));
}
static void *_p_NormalizationLayerMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((NormalizationLayerMaker *) x));
}
static void *_p_InputLayerMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((InputLayerMaker *) x));
}
static void *_p_FullyConnectedMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((FullyConnectedMaker *) x));
}
static void *_p_PoolingMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((PoolingMaker *) x));
}
static void *_p_ConvolutionalMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((ConvolutionalMaker *) x));
}
static void *_p_SquareLossMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((SquareLossMaker *) x));
}
static void *_p_CrossEntropyLossMakerTo_p_LayerMaker2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerMaker2 *)  ((CrossEntropyLossMaker *) x));
}
static void *_p_SGDTo_p_Trainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Trainer *)  ((SGD *) x));
}
static void *_p_NesterovTo_p_Trainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Trainer *)  ((Nesterov *) x));
}
static void *_p_AnnealerTo_p_Trainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Trainer *)  ((Annealer *) x));
}
static void *_p_AdagradTo_p_Trainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Trainer *)  ((Adagrad *) x));
}
static void *_p_RmspropTo_p_Trainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Trainer *)  ((Rmsprop *) x));
}
static void *_p_intArrayTo_p_int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int *)  ((intArray *) x));
}
static void *_p_intSliceTo_p_int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int *)  ((intSlice *) x));
}
static swig_type_info _swigt__p_ActivationMaker = {"_p_ActivationMaker", "ActivationMaker *", 0, 0, (void*)&_wrap_class_ActivationMaker, 0};
static swig_type_info _swigt__p_Adagrad = {"_p_Adagrad", "Adagrad *", 0, 0, (void*)&_wrap_class_Adagrad, 0};
static swig_type_info _swigt__p_Annealer = {"_p_Annealer", "Annealer *", 0, 0, (void*)&_wrap_class_Annealer, 0};
static swig_type_info _swigt__p_BatchResult = {"_p_BatchResult", "BatchResult *", 0, 0, (void*)&_wrap_class_BatchResult, 0};
static swig_type_info _swigt__p_ConvolutionalMaker = {"_p_ConvolutionalMaker", "ConvolutionalMaker *", 0, 0, (void*)&_wrap_class_ConvolutionalMaker, 0};
static swig_type_info _swigt__p_CrossEntropyLossMaker = {"_p_CrossEntropyLossMaker", "CrossEntropyLossMaker *", 0, 0, (void*)&_wrap_class_CrossEntropyLossMaker, 0};
static swig_type_info _swigt__p_DropoutMaker = {"_p_DropoutMaker", "DropoutMaker *", 0, 0, (void*)&_wrap_class_DropoutMaker, 0};
static swig_type_info _swigt__p_EasyCL = {"_p_EasyCL", "EasyCL *", 0, 0, (void*)&_wrap_class_EasyCL, 0};
static swig_type_info _swigt__p_FullyConnectedMaker = {"_p_FullyConnectedMaker", "FullyConnectedMaker *", 0, 0, (void*)&_wrap_class_FullyConnectedMaker, 0};
static swig_type_info _swigt__p_GenericLoader = {"_p_GenericLoader", "GenericLoader *", 0, 0, (void*)&_wrap_class_GenericLoader, 0};
static swig_type_info _swigt__p_InputLayerMaker = {"_p_InputLayerMaker", "InputLayerMaker *", 0, 0, (void*)&_wrap_class_InputLayerMaker, 0};
static swig_type_info _swigt__p_LayerMaker2 = {"_p_LayerMaker2", "LayerMaker2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Nesterov = {"_p_Nesterov", "Nesterov *", 0, 0, (void*)&_wrap_class_Nesterov, 0};
static swig_type_info _swigt__p_NetLearner = {"_p_NetLearner", "NetLearner *", 0, 0, (void*)&_wrap_class_NetLearner, 0};
static swig_type_info _swigt__p_NetdefToNet = {"_p_NetdefToNet", "NetdefToNet *", 0, 0, (void*)&_wrap_class_NetdefToNet, 0};
static swig_type_info _swigt__p_NeuralNet = {"_p_NeuralNet", "NeuralNet *", 0, 0, (void*)&_wrap_class_NeuralNet, 0};
static swig_type_info _swigt__p_NormalizationLayerMaker = {"_p_NormalizationLayerMaker", "NormalizationLayerMaker *", 0, 0, (void*)&_wrap_class_NormalizationLayerMaker, 0};
static swig_type_info _swigt__p_PoolingMaker = {"_p_PoolingMaker", "PoolingMaker *", 0, 0, (void*)&_wrap_class_PoolingMaker, 0};
static swig_type_info _swigt__p_QLearner2 = {"_p_QLearner2", "QLearner2 *", 0, 0, (void*)&_wrap_class_QLearner2, 0};
static swig_type_info _swigt__p_Rmsprop = {"_p_Rmsprop", "Rmsprop *", 0, 0, (void*)&_wrap_class_Rmsprop, 0};
static swig_type_info _swigt__p_SGD = {"_p_SGD", "SGD *", 0, 0, (void*)&_wrap_class_SGD, 0};
static swig_type_info _swigt__p_SoftMaxMaker = {"_p_SoftMaxMaker", "SoftMaxMaker *", 0, 0, (void*)&_wrap_class_SoftMaxMaker, 0};
static swig_type_info _swigt__p_SquareLossMaker = {"_p_SquareLossMaker", "SquareLossMaker *", 0, 0, (void*)&_wrap_class_SquareLossMaker, 0};
static swig_type_info _swigt__p_Trainer = {"_p_Trainer", "Trainer *", 0, 0, (void*)&_wrap_class_Trainer, 0};
static swig_type_info _swigt__p_TrainingContext = {"_p_TrainingContext", "TrainingContext *", 0, 0, (void*)&_wrap_class_TrainingContext, 0};
static swig_type_info _swigt__p_cl_device_id = {"_p_cl_device_id", "cl_device_id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cl_platform_id = {"_p_cl_platform_id", "cl_platform_id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_floatArray = {"_p_floatArray", "floatArray *", 0, 0, (void*)&_wrap_class_floatArray, 0};
static swig_type_info _swigt__p_floatSlice = {"_p_floatSlice", "floatSlice *", 0, 0, (void*)&_wrap_class_floatSlice, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_intArray = {"_p_intArray", "intArray *", 0, 0, (void*)&_wrap_class_intArray, 0};
static swig_type_info _swigt__p_intSlice = {"_p_intSlice", "intSlice *", 0, 0, (void*)&_wrap_class_intSlice, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ActivationMaker,
  &_swigt__p_Adagrad,
  &_swigt__p_Annealer,
  &_swigt__p_BatchResult,
  &_swigt__p_ConvolutionalMaker,
  &_swigt__p_CrossEntropyLossMaker,
  &_swigt__p_DropoutMaker,
  &_swigt__p_EasyCL,
  &_swigt__p_FullyConnectedMaker,
  &_swigt__p_GenericLoader,
  &_swigt__p_InputLayerMaker,
  &_swigt__p_LayerMaker2,
  &_swigt__p_Nesterov,
  &_swigt__p_NetLearner,
  &_swigt__p_NetdefToNet,
  &_swigt__p_NeuralNet,
  &_swigt__p_NormalizationLayerMaker,
  &_swigt__p_PoolingMaker,
  &_swigt__p_QLearner2,
  &_swigt__p_Rmsprop,
  &_swigt__p_SGD,
  &_swigt__p_SoftMaxMaker,
  &_swigt__p_SquareLossMaker,
  &_swigt__p_Trainer,
  &_swigt__p_TrainingContext,
  &_swigt__p_cl_device_id,
  &_swigt__p_cl_platform_id,
  &_swigt__p_float,
  &_swigt__p_floatArray,
  &_swigt__p_floatSlice,
  &_swigt__p_int,
  &_swigt__p_intArray,
  &_swigt__p_intSlice,
  &_swigt__p_std__string,
};

static swig_cast_info _swigc__p_ActivationMaker[] = {  {&_swigt__p_ActivationMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Adagrad[] = {  {&_swigt__p_Adagrad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Annealer[] = {  {&_swigt__p_Annealer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BatchResult[] = {  {&_swigt__p_BatchResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConvolutionalMaker[] = {  {&_swigt__p_ConvolutionalMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CrossEntropyLossMaker[] = {  {&_swigt__p_CrossEntropyLossMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DropoutMaker[] = {  {&_swigt__p_DropoutMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EasyCL[] = {  {&_swigt__p_EasyCL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FullyConnectedMaker[] = {  {&_swigt__p_FullyConnectedMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GenericLoader[] = {  {&_swigt__p_GenericLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InputLayerMaker[] = {  {&_swigt__p_InputLayerMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LayerMaker2[] = {  {&_swigt__p_DropoutMaker, _p_DropoutMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_SoftMaxMaker, _p_SoftMaxMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_ActivationMaker, _p_ActivationMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_LayerMaker2, 0, 0, 0},  {&_swigt__p_NormalizationLayerMaker, _p_NormalizationLayerMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_InputLayerMaker, _p_InputLayerMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_FullyConnectedMaker, _p_FullyConnectedMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_PoolingMaker, _p_PoolingMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_ConvolutionalMaker, _p_ConvolutionalMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_SquareLossMaker, _p_SquareLossMakerTo_p_LayerMaker2, 0, 0},  {&_swigt__p_CrossEntropyLossMaker, _p_CrossEntropyLossMakerTo_p_LayerMaker2, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Nesterov[] = {  {&_swigt__p_Nesterov, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetLearner[] = {  {&_swigt__p_NetLearner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetdefToNet[] = {  {&_swigt__p_NetdefToNet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NeuralNet[] = {  {&_swigt__p_NeuralNet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NormalizationLayerMaker[] = {  {&_swigt__p_NormalizationLayerMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PoolingMaker[] = {  {&_swigt__p_PoolingMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QLearner2[] = {  {&_swigt__p_QLearner2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Rmsprop[] = {  {&_swigt__p_Rmsprop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SGD[] = {  {&_swigt__p_SGD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoftMaxMaker[] = {  {&_swigt__p_SoftMaxMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SquareLossMaker[] = {  {&_swigt__p_SquareLossMaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Trainer[] = {  {&_swigt__p_Nesterov, _p_NesterovTo_p_Trainer, 0, 0},  {&_swigt__p_Trainer, 0, 0, 0},  {&_swigt__p_SGD, _p_SGDTo_p_Trainer, 0, 0},  {&_swigt__p_Annealer, _p_AnnealerTo_p_Trainer, 0, 0},  {&_swigt__p_Adagrad, _p_AdagradTo_p_Trainer, 0, 0},  {&_swigt__p_Rmsprop, _p_RmspropTo_p_Trainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrainingContext[] = {  {&_swigt__p_TrainingContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cl_device_id[] = {  {&_swigt__p_cl_device_id, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cl_platform_id[] = {  {&_swigt__p_cl_platform_id, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},  {&_swigt__p_floatArray, _p_floatArrayTo_p_float, 0, 0},  {&_swigt__p_floatSlice, _p_floatSliceTo_p_float, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_floatArray[] = {  {&_swigt__p_floatArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_floatSlice[] = {  {&_swigt__p_floatSlice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_intArray, _p_intArrayTo_p_int, 0, 0},  {&_swigt__p_intSlice, _p_intSliceTo_p_int, 0, 0},  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_intArray[] = {  {&_swigt__p_intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_intSlice[] = {  {&_swigt__p_intSlice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ActivationMaker,
  _swigc__p_Adagrad,
  _swigc__p_Annealer,
  _swigc__p_BatchResult,
  _swigc__p_ConvolutionalMaker,
  _swigc__p_CrossEntropyLossMaker,
  _swigc__p_DropoutMaker,
  _swigc__p_EasyCL,
  _swigc__p_FullyConnectedMaker,
  _swigc__p_GenericLoader,
  _swigc__p_InputLayerMaker,
  _swigc__p_LayerMaker2,
  _swigc__p_Nesterov,
  _swigc__p_NetLearner,
  _swigc__p_NetdefToNet,
  _swigc__p_NeuralNet,
  _swigc__p_NormalizationLayerMaker,
  _swigc__p_PoolingMaker,
  _swigc__p_QLearner2,
  _swigc__p_Rmsprop,
  _swigc__p_SGD,
  _swigc__p_SoftMaxMaker,
  _swigc__p_SquareLossMaker,
  _swigc__p_Trainer,
  _swigc__p_TrainingContext,
  _swigc__p_cl_device_id,
  _swigc__p_cl_platform_id,
  _swigc__p_float,
  _swigc__p_floatArray,
  _swigc__p_floatSlice,
  _swigc__p_int,
  _swigc__p_intArray,
  _swigc__p_intSlice,
  _swigc__p_std__string,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

